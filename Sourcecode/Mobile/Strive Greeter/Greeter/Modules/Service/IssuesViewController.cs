// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using Greeter.Cells;
using Greeter.Common;
using Greeter.DTOs;
using Greeter.Extensions;
using Greeter.Sources;
using Newtonsoft.Json;
using UIKit;

namespace Greeter.Storyboards
{
    public partial class IssuesViewController : BaseViewController
    {
        // Data
        const string SCREEN_TITLE = "Issues";
        

        //Data to set
        public long ClientID;
        public long VehicleID;
        public string Barcode;
        public string Email;
        public long MakeID;
        public long ModelID;
        public long UpchargeID;
        public string Model;
        public int ColorID;
        public string MakeName;

        VehicleIssueResponse vehicleIssueResponse;
       
        public IssuesViewController(IntPtr handle) : base(handle)
        {
           
        }
        
       
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            lblBarcode.Text = Barcode;
            lblDate.Text = DateTime.Now.ToString("dd-MM-yyyy");
            lblMake.Text = MakeName;
            lblModel.Text = Model;
            
            InitialiseUI();
            
            GetData();
            NSNotificationCenter.DefaultCenter.AddObserver(new NSString("com.strive.greeter.delete_clicked"), notify: (notification) => {
                if (notification.UserInfo is null)
                    return;

                var issueid = notification.UserInfo["issueid"] as NSString;
                var id = JsonConvert.DeserializeObject<string>(issueid);

                InvokeOnMainThread(() => {
                    deleteissue(int.Parse(id));
                });
            });
            NSNotificationCenter.DefaultCenter.AddObserver(new NSString("com.strive.greeter.reload_Add"), notify: (notification) =>
            {
                InvokeOnMainThread(() =>
                {
                    GetData();
                });
            });
            btnAddIssue.TouchUpInside += delegate
            {
                PresentAddIssuePopUp();
            };


        }

        private void BtnAddIssueTouchUpInside(object sender, EventArgs e)
        {
            PresentAddIssuePopUp();
        }

        void PresentAddIssuePopUp()
        {
            AddIssueViewController.vehicleId = VehicleID;
            View.Dispose();
            UIViewController vc = GetViewController(GetHomeStorybpard(), nameof(AddIssueViewController));
            vc.ModalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;
            
            PresentViewController(vc, true, null);
        }

        void InitialiseUI()
        {
            
            NavigationController.NavigationBar.Hidden = false;
            viewHeader.AddHearderViewShadow();
            tvIssues.RegisterNibForCellReuse(IssueCell.Nib, IssueCell.Key);
            
        }
        
        async void GetData()
        {
            ShowActivityIndicator();
            var testresponse = await SingleTon.VehicleApiService.GetVehicleIssue(VehicleID);
            vehicleIssueResponse = new VehicleIssueResponse();
            vehicleIssueResponse = testresponse;
            HideActivityIndicator();
            UpdateDataToUI();
        }

        public void UpdateDataToUI()
        {
            if (vehicleIssueResponse.VehicleIssueThumbnail != null)
            {
                Title = SCREEN_TITLE;
                tvIssues.Source = new IssuesSource(this.vehicleIssueResponse);
                tvIssues.ReloadData();
            }
            else
            {
                tvIssues.Hidden = true;
            }
            
        }

        public  async void deleteissue(int issueid)
        {
            ShowActivityIndicator();
            var result = await SingleTon.VehicleApiService.DeleteVehicleIssue(issueid);
            HideActivityIndicator();
            if (result.StatusCode == 200 )
            {
                ShowAlertMsg("Issue Deleted Successfuly");
                //var index = vehicleIssueResponse.VehicleIssueThumbnail.VehicleIssue.Find(X => X.VehicleIssueid == issueid);
                //vehicleIssueResponse.VehicleIssueThumbnail.VehicleIssue.Remove(index);
                //tvIssues.ReloadData();
                ViewDidLoad();
                Console.WriteLine("Issue Deleted Successfuly");
            }
            else
            {
                ShowAlertMsg("Vehicle Not Deleted");
                Console.WriteLine("Issue Not Deleted");
            }
        }

        
        
    }
}
