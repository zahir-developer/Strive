// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Foundation;
using Greeter.Cells;
using Greeter.Common;
using Greeter.DTOs;
using Greeter.Sources;
using UIKit;
using Xamarin.Essentials;

namespace Greeter.Storyboards
{
    public partial class AddIssueViewController : BaseViewController, IUITextViewDelegate
    {
        readonly List<UIImage> imagePaths = new();

        ImagesSource imagesSource;
        IssueImagesViewController IssueImagesViewController = new IssueImagesViewController(IntPtr.Zero);
        public VehicleIssueAddRequest vehicleIssueAddRequest;
        public vehicleIssue vehicleIssues;
        public vehicleIssueImage vehicleIssueImage;
        public string tempFilePath;
        public static long vehicleId;
        public AddIssueViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            InitialiseUI();

            tvIssueDetail.Layer.BorderWidth = 1;
            tvIssueDetail.Layer.BorderColor = UIColor.LightGray.CGColor;
            tvIssueDetail.Layer.CornerRadius = 5;

            //Clicks
            tvIssueDetail.Delegate = this;
            lblAddPhotos.AddGestureRecognizer(new UITapGestureRecognizer(TakePictureFromCamera));

            btnCancel.TouchUpInside += (s, e) => DismissViewController(true, null);
            btnSave.TouchUpInside += BtnSave_TouchUpInside;
        }
        

        void InitialiseUI()
        {
            ShowOrHideHint(tvIssueDetail.Text.Length, lblIssueDetailHint);
            imagesSource = new ImagesSource(imagePaths);

            cvImages.RegisterNibForCell(ImageCell.Nib, ImageCell.Key);
            cvImages.WeakDataSource = imagesSource;
            cvImages.WeakDelegate = imagesSource;
        }

        void UpdateDataToUI()
        {
            
        }

        void ShowOrHideHint(int len, UILabel lbl)
        {
            lbl.Hidden = len != 0;
        }

        private async void BtnSave_TouchUpInside(object sender, EventArgs e)
        {
            ShowActivityIndicator();
            vehicleIssueAddRequest = new VehicleIssueAddRequest();

            vehicleIssueAddRequest.vehicleIssue = new vehicleIssue();
            vehicleIssues = new vehicleIssue();
            vehicleIssues.vehicleId = vehicleId;
            vehicleIssues.vehicleIssueid = 0;
            vehicleIssues.description = tvIssueDetail.Text;
            vehicleIssues.isActive = true;
            vehicleIssues.isDeleted = false;
            vehicleIssues.createdDate = DateTime.Now.ToString("yyyy-MM-dd");
            vehicleIssues.createdBy = 0;
            vehicleIssues.updatedDate = DateTime.Now.ToString("yyyy-MM-dd");
            vehicleIssues.updatedBy = 0;
            vehicleIssueAddRequest.vehicleIssue = vehicleIssues;

            vehicleIssueAddRequest.vehicleIssueImage = new List<vehicleIssueImage>();
            foreach (var item in imagePaths)
            {
                string base64 = item.AsJPEG(0.23f).GetBase64EncodedString(NSDataBase64EncodingOptions.None);
                vehicleIssueImage = new vehicleIssueImage();
                vehicleIssueImage.vehicleIssueImageId = 0;
                vehicleIssueImage.vehicleIssueId = 0;
                vehicleIssueImage.documentType = null;
                vehicleIssueImage.imageName = "issueimage.jpg";
                vehicleIssueImage.originalImageName = "issueimage.jpg";
                vehicleIssueImage.thumbnailFileName = "issueimage.jpg";
                vehicleIssueImage.filePath = "string";//tempFilePath;
                vehicleIssueImage.base64 = base64;
                vehicleIssueImage.isActive = true;
                vehicleIssueImage.isDeleted = false;
                vehicleIssueImage.createdDate = DateTime.Now.ToString("yyyy-MM-dd");
                vehicleIssueImage.createdBy = 0;
                vehicleIssueImage.updatedDate = DateTime.Now.ToString("yyyy-MM-dd");
                vehicleIssueImage.updatedBy = 0;
                vehicleIssueAddRequest.vehicleIssueImage.Add(vehicleIssueImage);
            }

            //vehicleIssueImage = new vehicleIssueImage();
            //vehicleIssueImage.vehicleIssueImageId = 0;
            //vehicleIssueImage.vehicleIssueId = 0;
            //vehicleIssueImage.documentType = null;
            //vehicleIssueImage.imageName = "issueimage.jpg";
            //vehicleIssueImage.originalImageName = "issueimage.jpg";
            //vehicleIssueImage.thumbnailFileName = "issueimage.jpg";
            //vehicleIssueImage.filePath = "string";//tempFilePath;
            //vehicleIssueImage.base64 = sample;
            //vehicleIssueImage.isActive = true;
            //vehicleIssueImage.isDeleted = false;
            //vehicleIssueImage.createdDate = DateTime.Now.ToString("yyyy-MM-dd");
            //vehicleIssueImage.createdBy = 0;
            //vehicleIssueImage.updatedDate = DateTime.Now.ToString("yyyy-MM-dd");
            //vehicleIssueImage.updatedBy = 0;
            //vehicleIssueAddRequest.vehicleIssueImage.Add(vehicleIssueImage);
            var testresponse = await SingleTon.VehicleApiService.AddVehicleIssue(vehicleIssueAddRequest);
            HideActivityIndicator();
            if(testresponse.StatusCode == 200)
            {
                ShowAlertMsg("Issue Added Successfully");
                NSNotificationCenter.DefaultCenter.PostNotificationName(new NSString("com.strive.greeter.reload_Add"), null);
                //DismissViewController(true, null);
                
                
            }

            else
            {
                ShowAlertMsg("Issue Not Added");
            }
            await Task.Delay(3000);
            DismissViewController(true, null);


        }

        [Export("textView:shouldChangeTextInRange:replacementText:")]
        public bool ShouldChangeText(UITextView textView, NSRange range, string replacementString)
        {
            //int len = textView.Text.Length + text.Length - (int)range.Length;

            var oldNSString = new NSString(textView.Text ?? "");
            var replacedString = oldNSString.Replace(range, new NSString(replacementString));

            ShowOrHideHint((int)replacedString.Length, lblIssueDetailHint);

            return true;
        }

        async void TakePictureFromCamera()
        {
            try
            {
                var cameraResponse = await MediaPicker.CapturePhotoAsync();
                var stream = await cameraResponse.OpenReadAsync();

                 tempFilePath = string.Empty;

                if (stream != null && stream != Stream.Null)
                {
                    tempFilePath = Path.Combine(FileSystem.CacheDirectory, cameraResponse.FileName);
                    using (var fileStream = new FileStream(tempFilePath, FileMode.CreateNew))
                    {
                        await stream.CopyToAsync(fileStream);
                        await stream.FlushAsync();
                    }

                    await stream.DisposeAsync();
                }

                imagePaths.Add(UIImage.FromFile(tempFilePath));
                cvImages.ReloadData();
                if (imagePaths.Count == 3)
                {
                    ShowAlertMsg("You can add only 3 Images");
                    lblAddPhotos.Hidden = true;
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
            }
        }

        string sample = "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";
    }
}