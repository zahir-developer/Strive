// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using CoreFoundation;
using Foundation;
using Greeter.Common;
using Greeter.CustomView;
using Greeter.DTOs;
using Greeter.Extensions;
using Greeter.Modules.Pay;
using Greeter.Services.Api;
using UIKit;

namespace Greeter.Storyboards
{
    public partial class EmailViewController : BaseViewController, IUIPickerViewDelegate, IUIPickerViewDataSource, IUITextFieldDelegate, IMultiSelectPickerDelegate
    {
        // Data
        const string SCREEN_TITLE = "Email Receipt";
        //public string[] data = new string[] {
        //    "Main Street 1",
        //    "Main Street 2",
        //    "Main Street 3"
        //};

        public string Make;
        public string Model;
        public string Color;
        public string CustName;
        public CreateServiceRequest Service;
        public ServiceType ServiceType;
        public bool IsMembershipService;

        List<Employee> Employees;
        string[] employeeNames;

        //string selectedEmpEmailId;
        long selectedEmpId;

        List<long> selectedEmpIds;
        List<int> selectedEmpPositions;

        //Views
        UIPickerView pv = new UIPickerView();

        public EmailViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            NavigationController.NavigationBar.Hidden = true;

            Initialise();

#if DEBUG
            tfCust.Text = "karthiknever16@gmail.com";
#endif

            //Clicks
            btnEmpDropdown.TouchUpInside += delegate
            {
                tfEmp.BecomeFirstResponder();
            };

            btnEmpSent.TouchUpInside += delegate
            {
                //if (selectedEmpId == 0)
                //{
                //    ShowAlertMsg(Common.Messages.EMPLOYEE_MISSING);
                //    return;
                //}

                if (selectedEmpIds.IsNullOrEmpty())
                {
                    ShowAlertMsg(Common.Messages.EMPLOYEE_MISSING);
                    return;
                }

                //_ = SendEmail(selectedEmpEmailId);
                //_ = AssignServiceToEmployee(selectedEmpId);

                _ = GetDetailService(Service.Job.JobID);
            };

            btnCustomerSend.TouchUpInside += delegate
            {
                if (tfCust.Text.IsEmpty())
                {
                    ShowAlertMsg(Common.Messages.EMAIL_MISSING);
                    return;
                }

                _ = SendEmail(tfCust.Text);
            };

            btnPrint.TouchUpInside += delegate
            {
                PrintReceipt();
            };

            //Clicks
            btnPayLater.TouchUpInside += delegate
            {
                //var vc = NavigationController.ViewControllers[NavigationController.ViewControllers.Length - 3];
                NavigationController.PopToRootViewController(true);
            };

            //btnPrint.TouchUpInside += delegate
            //{
            //    //TODO : Temprary Loader to hide not done this functionality
            //    _ = ShowLoader();
            //};

            btnPay.TouchUpInside += delegate
            {
                if (IsMembershipService && ServiceType == ServiceType.Wash)
                {
                    ShowAlertMsg(Common.Messages.MEMBERSHIP_MESSAGE, () => { });
                    return;
                }

                NavigateToPayScreen();
            };
        }

        [Export("textFieldShouldReturn:")]
        public bool ShouldReturn(UITextField textField)
        {
            textField.EndEditing(true);
            return true;
        }

        //async Task ShowLoader()
        //{
        //    ShowActivityIndicator();
        //    await Task.Delay(3000);
        //    HideActivityIndicator();
        //}

        async Task GetData()
        {
            try
            {
                ShowActivityIndicator();

                var req = new GetDetailEmployeeReq
                {
                    LocationID = AppSettings.LocationID
                };

                var employeesResponse = await SingleTon.WashApiService.GetDetailEmployees(req);
                Employees = employeesResponse?.EmployeeList;

                employeeNames = GetEmployeeNames(Employees);
                tfEmp.AddTarget((sender, e) => { ShowMultiselectOptions(employeeNames.ToList()); }, UIControlEvent.EditingDidBegin);

                //if (employeeNames.Length > 0)
                //{
                //    AddPickerToolbar(tfEmp, tfEmp.Placeholder, PickerDone);
                //    tfEmp.InputView = pv;
                //}
            }
            catch (Exception ex)
            {

            }
            finally
            {
                HideActivityIndicator();
            }
        }

        string[] GetEmployeeNames(List<Employee> employees)
        {
             return employees?.Select(x => Logic.FullName(x.FirstName, x.LastName)).ToArray();
        }

        async Task GetDetailService(long jobId)
        {
            try
            {
                ShowActivityIndicator();
                var response = await SingleTon.WashApiService.GetDetailService(jobId);
                HandleResponse(response);

                if (response.IsSuccess())
                {
                    await AssignServiceToEmployees(selectedEmpIds, response?.DetailsForDetailID?.DetailsItems);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
            finally
            {
                HideActivityIndicator();
            }
        }

        async Task AssignServiceToEmployee(long selectedEmpId, List<DetailsItem> detailsItems)
        {
            try
            {
                //ShowActivityIndicator();
                var req = new AssignEmployeeToServiceReq();
                req.JobID = Service.Job.JobID;
                req.JobServiceEmployees = new();

                for (int i = 0; i < detailsItems.Count; i++)
                {
                    var assignEmployeeToService = new AssignEmployeeToService();
                    assignEmployeeToService.JobItemID = detailsItems[i].JobItemID;
                    assignEmployeeToService.ServiceID = detailsItems[i].ServiceID;
                    assignEmployeeToService.EmployeeID = selectedEmpId;

                    if (string.IsNullOrEmpty(detailsItems[i].CommissionType))
                    {
                        assignEmployeeToService.CommissionAmount = 0;
                    }
                    else if (detailsItems[i].CommissionType.Equals("flat fee", StringComparison.OrdinalIgnoreCase))
                    {
                        assignEmployeeToService.CommissionAmount = detailsItems[i].CommissionCost;
                    }
                    else if (detailsItems[i].CommissionType.Equals("percentage", StringComparison.OrdinalIgnoreCase))
                    {
                        assignEmployeeToService.CommissionAmount = (detailsItems[i].Price * detailsItems[i].CommissionCost) / 100;
                    }

                    req.JobServiceEmployees.Add(assignEmployeeToService);
                }

                var response = await SingleTon.WashApiService.AssignEmployeeToDetailService(req);

                HandleResponse(response);

                if (response.IsSuccess())
                {
                    tfEmp.UserInteractionEnabled = false;
                    tfEmp.Enabled = false;
                    btnEmpSent.UserInteractionEnabled = false;
                    btnEmpSent.BackgroundColor = btnEmpSent.BackgroundColor.ColorWithAlpha(0.6f);
                    //btnEmpSent.Enabled = false;
                    ShowAlertMsg(Common.Messages.EMPLOYEE_ASSIGNED_SUCCESS_MSG, titleTxt: Common.Messages.ASSIGN);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("Exception happened and the reason is : " + ex.Message);
            }
            finally
            {
                //HideActivityIndicator();
            }
        }

        async Task AssignServiceToEmployees(List<long> selectedEmpIds, List<DetailsItem> detailsItems)
        {
            try
            {
                //ShowActivityIndicator();
                var req = new AssignEmployeeToServiceReq();
                req.JobID = Service.Job.JobID;
                req.JobServiceEmployees = new();

                for (int i = 0; i < detailsItems.Count; i++)
                {
                    //var assignEmployeeToService = new AssignEmployeeToService();
                    //assignEmployeeToService.JobItemID = detailsItems[i].JobItemID;
                    //assignEmployeeToService.ServiceID = detailsItems[i].ServiceID;
                    //assignEmployeeToService.EmployeeID = selectedEmpId;

                    //if (string.IsNullOrEmpty(detailsItems[i].CommissionType))
                    //{
                    //    assignEmployeeToService.CommissionAmount = 0;
                    //}
                    //else if (detailsItems[i].CommissionType.Equals("flat fee", StringComparison.OrdinalIgnoreCase))
                    //{
                    //    assignEmployeeToService.CommissionAmount = detailsItems[i].CommissionCost;
                    //}
                    //else if (detailsItems[i].CommissionType.Equals("percentage", StringComparison.OrdinalIgnoreCase))
                    //{
                    //    assignEmployeeToService.CommissionAmount = (detailsItems[i].Price * detailsItems[i].CommissionCost) / 100;
                    //}

                    //req.JobServiceEmployees.Add(assignEmployeeToService);

                    var commisionAmount = -1f;

                    if (string.IsNullOrEmpty(detailsItems[i].CommissionType))
                    {
                        commisionAmount = 0;
                    }
                    else if (detailsItems[i].CommissionType.Equals("flat fee", StringComparison.OrdinalIgnoreCase))
                    {
                        commisionAmount = detailsItems[i].CommissionCost;
                    }
                    else if (detailsItems[i].CommissionType.Equals("percentage", StringComparison.OrdinalIgnoreCase))
                    {
                        commisionAmount = (detailsItems[i].Price * detailsItems[i].CommissionCost) / 100;
                    }

                    var individualCommisionAmount = commisionAmount / selectedEmpIds.Count;

                    for (int j = 0; j < selectedEmpIds.Count; j++)
                    {
                        var assignEmployeeToService = new AssignEmployeeToService();
                        assignEmployeeToService.JobItemID = detailsItems[i].JobItemID;
                        assignEmployeeToService.ServiceID = detailsItems[i].ServiceID;
                        assignEmployeeToService.EmployeeID = selectedEmpIds[j];
                        assignEmployeeToService.CommissionAmount = individualCommisionAmount;
                        req.JobServiceEmployees.Add(assignEmployeeToService);
                    }
                }

                var response = await SingleTon.WashApiService.AssignEmployeeToDetailService(req);

                HandleResponse(response);

                if (response.IsSuccess())
                {
                    tfEmp.UserInteractionEnabled = false;
                    tfEmp.Enabled = false;
                    btnEmpSent.UserInteractionEnabled = false;
                    btnEmpSent.BackgroundColor = btnEmpSent.BackgroundColor.ColorWithAlpha(0.6f);
                    //btnEmpSent.Enabled = false;
                    ShowAlertMsg(Common.Messages.EMPLOYEE_ASSIGNED_SUCCESS_MSG, titleTxt: Common.Messages.ASSIGN);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("Exception happened and the reason is : " + ex.Message);
            }
            finally
            {
                //HideActivityIndicator();
            }
        }

      

async Task SendEmail(string email)
        {
            try
            {
                if (!email.IsEmail())
                {
                    ShowAlertMsg(Common.Messages.EMAIL_WARNING);
                    return;
                }

                ShowActivityIndicator();

                //var body = "<p>Ticket Number : </p>" + Service.Job.JobID + "<br /><br />";

                //if (Service.Job.ClientID != 0 && Service.Job.ClientID is not null)
                //{
                //    body += "<p>Customer Details : </p>" + ""
                //        + "<p>Customer Name - " + CustName + "</p><br />";
                //}

                //body += "<p>Vehicle Details : </p>" +
                //     "<p>Make - " + Make + "</p>" +
                //    "<p>Model - " + Model + "</p>" +
                //     "<p>Color - " + Color + "</p><br />" +
                //     "<p>Services : " + "</p>";

                //var totalAmt = 0f;
                //for (int i = 0; i < Service.JobItems.Count; i++)
                //{
                //    var job = Service.JobItems[i];
                //    var price = job.Price.ToString();
                //    if ((job.Price % 1) == 0)
                //    {
                //        price += ":00";
                //    }
                //    else
                //    {
                //        var values = price.Split(".");
                //        price = (int)job.Price + ":" + values[1];
                //    }

                //    body += "<p>" + job.SeriveName + " - " + "$" + price + "</p>";
                //    totalAmt += job.Price;
                //}

                //body += "<br/ ><p>" + "Total Amount Due: " + "$" + totalAmt.ToString() + "</p>";

                //body += "<br/ ><p>Note: Please avoid if you already paid.</p>";

                string bodyHtml = MakeServiceReceipt();

                Debug.WriteLine("Email Body :" + bodyHtml);

                string subject = null;
                if (ServiceType == ServiceType.Wash)
                    subject = Common.Messages.SERVICE_RECEIPT_SUBJECT;
                else // DETAIL
                    subject = Common.Messages.DETAIL_RECEIPT_SUBJECT;

                var response = await new WashApiService().SendEmail(email, subject, bodyHtml);

                HandleResponse(response);

                if (response.IsSuccess())
                {
                    ShowAlertMsg(Common.Messages.EMAIL_SENT_MSG, titleTxt: Common.Messages.EMAIL);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("Exception happened and the reason is : " + ex.Message);
            }

            HideActivityIndicator();
        }

        void PrintReceipt()
        {
            string printContentHtml = MakeServiceReceipt();
            Print(printContentHtml);
        }

        string MakeServiceReceipt()
        {
            var body = "<p>Ticket Number : </p>" + Service.Job.JobID + "<br /><br />";

            if (!string.IsNullOrEmpty(CustName))
            {
                body += "<p>Customer Details : </p>" + ""
                    + "<p>Customer Name - " + CustName + "</p><br />";
            }

            body += "<p>Vehicle Details : </p>" +
                 "<p>Make - " + Make + "</p>" +
                "<p>Model - " + Model + "</p>" +
                 "<p>Color - " + Color + "</p><br />" +
                 "<p>Services : " + "</p>";

            var totalAmt = 0f;
            if (Service is not null)
            {
                for (int i = 0; i < Service.JobItems.Count; i++)
                {
                    var job = Service.JobItems[i];
                    var price = job.Price.ToString();
                    if ((job.Price % 1) == 0)
                    {
                        price += ":00";
                    }
                    else
                    {
                        var values = price.Split(".");
                        price = (int)job.Price + ":" + values[1];
                    }

                    body += "<p>" + job.SeriveName + " - " + "$" + price + "</p>";
                    totalAmt += job.Price;
                    //Amount = totalAmt;
                }
            }
            //else
            //{
            //    if (!string.IsNullOrEmpty(ServiceName))
            //    {
            //        body += "<p>" + ServiceName + "</p>";
            //    }

            //    if (!string.IsNullOrEmpty(AdditionalServiceName) && !AdditionalServiceName.Equals("none", StringComparison.OrdinalIgnoreCase))
            //    {
            //        body += "<p>" + AdditionalServiceName + "</p>";
            //    }
            //}

            body += "<br/ ><p>" + "Total Amount Due: " + "$" + totalAmt.ToString() + "</p>";

            body += "<br/ ><p>Note: Please disregard if you already paid.</p>";

            Debug.WriteLine("Email Body :" + body);

            return body;
        }

        void Initialise()
        {
            Title = SCREEN_TITLE;

            tfCust.WeakDelegate = this;

            tfEmp.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfEmp.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);

            tfCust.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfCust.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);

            // For Restricting typing in the location field
            tfEmp.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };

            pv.DataSource = this;
            pv.Delegate = this;

            if (ServiceType == ServiceType.Wash)
            {
                viewDetailer.Hidden = true;
            }
            else
            {
                _ = GetData();
            }
        }

        void PickerDone()
        {
            if (employeeNames.Length > 0)
            {
                int pos = (int)pv.SelectedRowInComponent(0);
                tfEmp.Text = employeeNames[pos];
                //selectedEmpEmailId = Employees[pos].EmailID;
                selectedEmpId = Employees[pos].ID;
            }
        }

        void ShowMultiselectOptions(List<string> options)
        {
            var nc = new UINavigationController();
            var mc = new MultiSelectPicker();
            nc.ViewControllers = new UIViewController[] { mc };
            mc.Options = options;
            mc.PickerDelegate = this;

            mc.DefaultSelectedIndex = selectedEmpPositions;

            PresentViewController(nc, true, null);
        }

        void NavigateToPayScreen()
        {
            var vc = new PaymentViewController();
            vc.JobID = Service.Job.JobID;
            vc.Make = Make;
            vc.Model = Model;
            vc.Color = Color;
            vc.CustName = CustName;
            //vc.IsMembershipService = IsMembershipService;

            //var mainService  = Service.JobItems.First(x => x.IsMainService);
            //vc.ServiceName = mainService.SeriveName;
            vc.Service = Service;
            vc.ServiceType = ServiceType;

            var totalAmt = 0f;
            for (int i = 0; i < Service.JobItems.Count; i++)
            {
                totalAmt += Service.JobItems[i].Price;
            }
            vc.Amount = totalAmt;

            NavigateToWithAnim(vc);
        }

        public nint GetComponentCount(UIPickerView pickerView)
        {
            return 1;
        }

        public nint GetRowsInComponent(UIPickerView pickerView, nint component)
        {
            return employeeNames?.Length ?? 0;
        }

        [Export("pickerView:didSelectRow:inComponent:")]
        public void Selected(UIPickerView pickerView, nint row, nint component)
        {

        }

        [Export("pickerView:titleForRow:forComponent:")]
        public string GetTitle(UIPickerView pickerView, nint row, nint component)
        {
            return employeeNames[row];
        }

        void UpdateSelectedAdditionalServices(List<int> selectedIndexList)
        {
            if (selectedIndexList is null || selectedIndexList.Count == 0)
            {

                return;
            }

            selectedEmpPositions = selectedIndexList;

            if (selectedEmpIds is null)
                selectedEmpIds = new();

            selectedEmpIds.Clear();

            List<string> selectedEmpNames = new();

            for (int i = 0; i < selectedIndexList.Count; i++)
            {
                //int selectedPos = selectedIndexList[i];

                //selectedPos -= 1;

                //var additional = new JobItem();
                //additional.ServiceId = Employees[selectedPos].ID;
                //additional.SeriveName = AdditionalServices[selectedPos].Name;
                //additional.Price = AdditionalServices[selectedPos].Price;
                //additional.Time = AdditionalServices[selectedPos].Time;
                //additional.IsCommission = AdditionalServices[selectedPos].Commission;
                //additional.CommissionType = AdditionalServices[selectedPos].CommissionType;
                //additional.CommissionAmount = AdditionalServices[selectedPos].CommissionCost;
                //additionalServcies.Add(additional);

                var emp = Employees[selectedIndexList[i]];

                selectedEmpIds.Add(emp.ID);
                selectedEmpNames.Add(Logic.FullName(emp.FirstName, emp.LastName));
            }

            tfEmp.Text = String.Join(", ", selectedEmpNames);
        }

        public void DidCompleted(MultiSelectPicker pickerView, List<int> selectedIndexList)
        {
            UpdateSelectedAdditionalServices(selectedIndexList);
        }

        public void DidCancel(MultiSelectPicker pickerView)
        {
            
        }
    }
}
