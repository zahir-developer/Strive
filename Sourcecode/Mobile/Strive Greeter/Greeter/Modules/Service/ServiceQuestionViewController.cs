// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Foundation;
using Greeter.Common;
using Greeter.DTOs;
using Greeter.Extensions;
using Greeter.Services.Network;
using UIKit;

namespace Greeter.Storyboards
{
    public partial class ServiceQuestionViewController : BaseViewController, IUIPickerViewDelegate, IUIPickerViewDataSource
    {
        class ServiceTypes
        {
            public const string AIR_FRESHNERS = "Air Fresheners";
            public const string ADDITIONAL_SERVICES = "Additional Services";
            public const string WASH_PACKAGE = "Wash Package";
            public const string DETAIL_PACKAGE = "Detail Package";
            public const string WASH_UPCHARGE = "Wash-Upcharge";
            public const string DETAIL_UPCHARGE = "Detail-Upcharge";
        }

        string[] sampleData = new string[] {
            "Main Street 1",
            "Main Street 2",
            "Main Street 3"
        };

        string[] data;

        string[] SCREEN_TITLES = new string[] { "Wash", "Detail" };

        public ServiceType ServiceType;
        ChoiceType choiceType;

        //Selected Items
        public string Barcode;

        // Data
        List<Code> Types;
        List<Make> Makes;
        List<Code> Colors;
        List<ServiceDetail> WashPackages;
        List<ServiceDetail> DetailPackages;
        List<ServiceDetail> Upcharges;
        List<ServiceDetail> AdditionalServices;
        List<ServiceDetail> AirFreshners;

        string[] types;
        string[] makes;
        string[] colors;
        string[] washPackages;
        string[] detailPackages;
        string[] upcharges;
        string[] additionalServices;
        string[] airFreshners;

        //Views
        UIPickerView pv = new UIPickerView();

        public ServiceQuestionViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            Initialise();
            UpdateBarcodeData();

            GetData();

            //Clicks
            btnNext.TouchUpInside += delegate
            {
                NavigateToVerifyScreen();
            };

            //Choice type change
            tfType.EditingDidBegin += delegate
            {
                choiceType = ChoiceType.Type;
                data = sampleData;
            };

            btnTypeDropdown.TouchUpInside += delegate
            {
                tfType.BecomeFirstResponder();
            };

            tfMake.EditingDidBegin += delegate
            {
                choiceType = ChoiceType.Make;
                data = makes;
                pv.ReloadComponent(0);
                int pos = Array.IndexOf(makes, tfType.Text);
                pv.Select(pos, 0, false);
            };

            btnMakeDropdown.TouchUpInside += delegate
            {
                tfMake.BecomeFirstResponder();
            };

            tfColor.EditingDidBegin += delegate
            {
                choiceType = ChoiceType.Color;
                data = colors;
                pv.ReloadComponent(0);
                int pos = Array.IndexOf(colors, tfColor.Text);
                pv.Select(pos, 0, false);
            };

            btnColorDropdown.TouchUpInside += delegate
            {
                tfColor.BecomeFirstResponder();
            };

            //tfBarcode.EditingDidBegin += delegate
            //{
            //    choiceType = ChoiceType.Barcode;
            //    data = sampleData;
            //    //cityCountryPickerView.DataSource = new MyPikcerSource(cities);
            //    //cityCountryPickerView.Delegate = new CityCountryPikcerDelegate(cities, this);
            //    //int pos = cities.IndexOf(cityTextField.Text);
            //    //cityCountryPickerView.Select(pos, Constants.ZERO, false);
            //};

            tfWashPkg.EditingDidBegin += delegate
            {
                choiceType = ChoiceType.Washpackage;
                data = washPackages;
                pv.ReloadComponent(0);
                int pos = Array.IndexOf(washPackages, tfWashPkg.Text);
                pv.Select(pos, 0, false);
            };

            btnWashPkgDropdown.TouchUpInside += delegate
            {
                tfWashPkg.BecomeFirstResponder();
            };

            tfDetailPkg.EditingDidBegin += delegate
            {
                choiceType = ChoiceType.DetailPackage;
                data = detailPackages;
                pv.ReloadComponent(0);
                int pos = Array.IndexOf(detailPackages, tfDetailPkg.Text);
                pv.Select(pos, 0, false);
            };

            btnDetailPkgDropdown.TouchUpInside += delegate
            {
                tfDetailPkg.BecomeFirstResponder();
            };

            tfUpcharge.EditingDidBegin += delegate
            {
                choiceType = ChoiceType.Upcharge;
                data = upcharges;
                pv.ReloadComponent(0);
                int pos = Array.IndexOf(upcharges, tfUpcharge.Text);
                pv.Select(pos, 0, false);
            };

            btnUpchargeDropdown.TouchUpInside += delegate
            {
                tfUpcharge.BecomeFirstResponder();
            };

            tfAdditionalService.EditingDidBegin += delegate
            {
                choiceType = ChoiceType.AdditionalService;
                data = additionalServices;
                pv.ReloadComponent(0);
                int pos = Array.IndexOf(additionalServices, tfAdditionalService.Text);
                pv.Select(pos, 0, false);
            };

            btnAddtionalDropdown.TouchUpInside += delegate
            {
                tfAdditionalService.BecomeFirstResponder();
            };

            tfAirFreshner.EditingDidBegin += delegate
            {
                choiceType = ChoiceType.AirFreshner;
                data = airFreshners;
                pv.ReloadComponent(0);
                int pos = Array.IndexOf(airFreshners, tfAirFreshner.Text);
                pv.Select(pos, 0, false);
            };

            btnAirFReshnersDropdown.TouchUpInside += delegate
            {
                tfAirFreshner.BecomeFirstResponder();
            };

            btnCancel.TouchUpInside += delegate
            {
                this.NavigationController.PopViewController(true);
            };
        }

        async Task GetData()
        {
            ShowActivityIndicator();
            var typesResponse = await new ApiService(new NetworkService()).GetGlobalData("VEHICLEMANUFACTURER");
            Types = typesResponse.Codes;
            makes = Types?.Select(x => x.Name).ToArray();
            var makesResponse = await new ApiService(new NetworkService()).GetAllMake();
            Makes = makesResponse?.MakeList;
            makes = Makes?.Select(x => x.Name).ToArray();

            var colorResponse = await new ApiService(new NetworkService()).GetGlobalData("VEHICLECOLOR");
            Colors = colorResponse?.Codes;
            colors = colorResponse?.Codes.Select(x => x.Name).ToArray();

            var allServiceResponse = await new ApiService(new NetworkService()).GetAllSericeDetails(AppSettings.LocationID);
            if (ServiceType == ServiceType.Wash)
            {
                WashPackages = allServiceResponse?.ServiceDetailList.Where(x => x.Type.Equals(ServiceTypes.WASH_PACKAGE)).ToList();
                washPackages = WashPackages.Select(x => x.Name).ToArray();

                Upcharges = allServiceResponse?.ServiceDetailList.Where(x => x.Type.Equals(ServiceTypes.WASH_UPCHARGE)).ToList();
            }
            else
            {
                DetailPackages = allServiceResponse?.ServiceDetailList.Where(x => x.Type.Equals(ServiceTypes.DETAIL_PACKAGE)).ToList();
                detailPackages = DetailPackages.Select(x => x.Name).ToArray();

                Upcharges = allServiceResponse?.ServiceDetailList.Where(x => x.Type.Equals(ServiceTypes.DETAIL_UPCHARGE)).ToList();
            }

            upcharges = Upcharges.Select(x => x.Name).ToArray();

            AdditionalServices = allServiceResponse?.ServiceDetailList.Where(x => x.Type.Equals(ServiceTypes.ADDITIONAL_SERVICES)).ToList();
            additionalServices = AdditionalServices.Select(x => x.Name).ToArray();

            AirFreshners = allServiceResponse?.ServiceDetailList.Where(x => x.Type.Equals(ServiceTypes.AIR_FRESHNERS)).ToList();
            airFreshners = AirFreshners.Select(x => x.Name).ToArray();

            HideActivityIndicator();
        }

        void UpdateBarcodeData()
        {
            if (!String.IsNullOrEmpty(Barcode))
            {
                btnTypeDropdown.Hidden = true;
                btnMakeDropdown.Hidden = true;
                btnColorDropdown.Hidden = true;

                tfType.UserInteractionEnabled = false;
                tfMake.UserInteractionEnabled = false;
                tfColor.UserInteractionEnabled = false;

                tfBarcode.Text = Barcode;
            }
        }

        void Initialise()
        {
            string[] SCREEN_TITLES = new string[] { "Wash", "Detail" };

            NavigationController.NavigationBar.Hidden = false;
            Title = ServiceType == ServiceType.Wash ? SCREEN_TITLES[0] : SCREEN_TITLES[1];

            viewHeader.AddHearderViewShadow();

            DateTime dt = GetCurrentDate();
            lblDate.Text = dt.ToString(Constants.DATE_FORMAT);
            lblTime.Text = dt.ToString(Constants.TIME_FORMAT);

            tfType.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfType.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);
            tfMake.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfMake.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);
            tfColor.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfColor.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);
            tfBarcode.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfBarcode.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);
            tfUpcharge.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfUpcharge.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);
            tfWashPkg.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfWashPkg.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);
            tfDetailPkg.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfDetailPkg.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);
            tfAdditionalService.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfAdditionalService.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);
            tfAirFreshner.AddLeftPadding(UIConstants.TEXT_FIELD_HORIZONTAL_PADDING);
            tfAirFreshner.AddRightPadding(UIConstants.TEXT_FIELD_RIGHT_BUTTON_PADDING);

            ChangeScreenType(ServiceType);

            AddPickerToolbar(tfType, tfType.Placeholder, PickerDone);
            AddPickerToolbar(tfMake, tfMake.Placeholder, PickerDone);
            AddPickerToolbar(tfColor, tfColor.Placeholder, PickerDone);
            //AddPickerToolbar(tfBarcode, tfBarcode.Placeholder, PickerDone);
            AddPickerToolbar(tfWashPkg, tfWashPkg.Placeholder, PickerDone);
            AddPickerToolbar(tfDetailPkg, tfDetailPkg.Placeholder, PickerDone);
            AddPickerToolbar(tfUpcharge, tfUpcharge.Placeholder, PickerDone);
            AddPickerToolbar(tfAdditionalService, tfAdditionalService.Placeholder, PickerDone);
            AddPickerToolbar(tfAirFreshner, tfAirFreshner.Placeholder, PickerDone);

            tfType.InputView = pv;
            tfMake.InputView = pv;
            tfColor.InputView = pv;
            //tfBarcode.InputView = pv;
            tfUpcharge.InputView = pv;
            tfWashPkg.InputView = pv;
            tfDetailPkg.InputView = pv;
            tfAdditionalService.InputView = pv;
            tfAirFreshner.InputView = pv;

            // For Restricting typing in the location field
            tfType.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };

            tfMake.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };

            tfColor.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };

            tfBarcode.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };

            tfUpcharge.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };

            tfWashPkg.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };

            tfDetailPkg.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };

            tfAdditionalService.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };

            tfAirFreshner.ShouldChangeCharacters = (textField, range, replacementString) =>
            {
                return false;
            };


            pv.DataSource = this;
            pv.Delegate = this;
        }

        //public override void ViewDidDisappear(bool animated)
        //{
        //    base.ViewDidDisappear(animated);
        //}

        DateTime GetCurrentDate()
        {
            return DateTime.Now;
        }

        void PickerDone()
        {
            int pos = (int)pv.SelectedRowInComponent(0);

            switch (choiceType)
            {
                case ChoiceType.Type:
                    tfType.Text = data[pos];
                    break;
                case ChoiceType.Make:
                    tfMake.Text = data[pos];
                    break;
                case ChoiceType.Color:
                    tfColor.Text = data[pos];
                    break;
                case ChoiceType.Barcode:
                    tfBarcode.Text = data[pos];
                    break;
                case ChoiceType.Upcharge:
                    tfUpcharge.Text = data[pos];
                    break;
                case ChoiceType.AdditionalService:
                    tfAdditionalService.Text = data[pos];
                    break;
                case ChoiceType.AirFreshner:
                    tfAirFreshner.Text = data[pos];
                    break;
                case ChoiceType.Washpackage:
                    tfWashPkg.Text = data[pos];
                    break;
                case ChoiceType.DetailPackage:
                    tfDetailPkg.Text = data[pos];
                    break;
            }
        }

        void ChangeScreenType(ServiceType type)
        {
            switch (type)
            {
                case ServiceType.Wash:
                    tfdetailHeight.Constant = 0;
                    tfdetailTop.Constant = 0;
                    break;
                case ServiceType.Detail:
                    tfwashHeight.Constant = 0;
                    tfwashTop.Constant = 0;
                    break;
            }
        }

        void NavigateToVerifyScreen()
        {
            UIViewController vc = GetViewController(GetHomeStorybpard(), nameof(VerifyVehicleInfoViewController));
            NavigateToWithAnim(vc);
        }

        public nint GetComponentCount(UIPickerView pickerView)
        {
            return 1;
        }

        public nint GetRowsInComponent(UIPickerView pickerView, nint component)
        {
            return data?.Length ?? 0;
        }

        [Export("pickerView:didSelectRow:inComponent:")]
        public void Selected(UIPickerView pickerView, nint row, nint component)
        {

        }

        [Export("pickerView:titleForRow:forComponent:")]
        public string GetTitle(UIPickerView pickerView, nint row, nint component)
        {
            return data[row];
        }
    }

    public enum ServiceType
    {
        Wash,
        Detail
    }

    public enum ChoiceType
    {
        Type,
        Make,
        Color,
        vehicle,
        Barcode,
        Upcharge,
        AdditionalService,
        AirFreshner,
        Washpackage,
        DetailPackage
    }
}
