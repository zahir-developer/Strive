

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Diagnostics;
using System.Threading.Tasks;
using Foundation;
using Greeter.Common;
using Greeter.DTOs;
using Greeter.Extensions;
using MessageUI;
using UIKit;

namespace Greeter.Storyboards
{
    public partial class PaymentSucessViewController : BaseViewController, IMFMailComposeViewControllerDelegate, IEmailDelegate
    {
        // Data
        const string SCREEN_TITLE = "Pay";

        public long TicketID;
        public string Make;
        public string Model;
        public string Color;
        public string ServiceName;
        public string AdditionalServiceName;
        public float Amount;
        public string CustomerName;
        //public bool IsFromNewService = true;
        public ServiceType ServiceType;
        public CreateServiceRequest Service;
        //public bool IsMembershipService;
        public string CardNumber;
        public string Barcode;
        public string CheckInTime;
        public string CheckOutTime;

        const string HTML_TEMPLATE = "\n\n<table style=\"border-collapse: collapse; width: 100%; height: 90px;\" border=\"0\">\n<tbody>\n<tr style=\"height: 18px;\">\n<td></td>\n<td style=\"text-align: center;\">{title}</td>\n<td></td>\n</tr>\n<tr style=\"height: 18px;\">\n<td >In: &nbsp; {check_in}</td>\n<td ></td>\n<td style=\"width: 25%; text-align: right; height: 18px;\">{Barcode}</td>\n</tr>\n\n<tr>\n<td>\n<div><strong>Out: {check_out}</strong>\n</div>\n</td>\n<td></td>\n<td style=\"width: 25%; text-align: right; height: 18px;\"><span style=\"text-align: right;\">&nbsp;</span></td>\n</tr>\n<tr>\n<td >Client Name: {Client Name}</td>\n<td ></td>\n<td ></td>\n</tr>\n<tr>\n<td >{Vehicle Make}</td>\n<td > {Vehicle Model}</td>\n<td style=\"width: 25%; text-align: right; height: 18px;\">\n{Vehicle Color}</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<table border=\"1\" width=\"100%\">\n</table>\n\n<br/>\n\n";

        const string SERVICE_NAME_HTML = "<input type=\"checkbox\" /> {Service Name}\n<br/>\n";

        const string TICKET_NO_HTML = "\nTicket Number: {Ticket No}\n";

        public PaymentSucessViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            NavigationController.NavigationBar.Hidden = true;

            Initialise();
            UpdateData();

            lblReceipt.AddGestureRecognizer(new UITapGestureRecognizer(NoReceiptClicked));

            btnPrint.TouchUpInside += delegate
            {
                PrintReceipt();
            };

            btnVehicleTicket.TouchUpInside += delegate
            {
                _ = PrintVehicleTicket();
            };

            btnEmail.TouchUpInside += delegate
            {
                EmailPopupViewController vc = (EmailPopupViewController)GetViewController(GetHomeStorybpard(), nameof(EmailPopupViewController));
                vc.EmailDelegate = this;
                PresentViewController(vc, true, () => { });

                //TestEmailTemplate();
            };
        }

        async Task PrintVehicleTicket()
        {
            //string date = "11-12-2021";
            //string title = "something";
            //string barcode = "123456";
            //string check_in = "10:11";
            //string check_out = "11:11";
            //string make = "ds";
            //string model = "dsp";
            //string color = "red";
            //string clientName = "karthik";
            //string t_no = "654321";

            //var html = HTML_TEMPLATE.Replace("{serviceTime}", date).Replace("{title}", title).Replace("{Barcode}", barcode)
            //    .Replace("{check_in}", check_in).Replace("{check_out}", check_out).Replace("{Vehicle Make}", make).Replace("{Vehicle Model}", model).Replace("{Vehicle Color}", color)
            //    .Replace("{Client Name}", clientName).Replace("{Ticket No}", t_no);

            string title = Common.Messages.SERVICE_RECEIPT_SUBJECT;

            if (ServiceType == ServiceType.Detail)
            {
                title = Common.Messages.DETAIL_RECEIPT_SUBJECT;
            }

            var html = HTML_TEMPLATE.Replace("{serviceTime}", "date").Replace("{title}", title).Replace("{Barcode}", Barcode)
                .Replace("{check_in}", CheckInTime).Replace("{check_out}", CheckOutTime).Replace("{Vehicle Make}", Make).Replace("{Vehicle Model}", Model).Replace("{Vehicle Color}", Color)
                .Replace("{Client Name}", CustomerName);

            var serviceHtml = string.Empty;

            if (Service is not null)
            {
                //var totalAmt = 0f;
                for (int i = 0; i < Service.JobItems.Count; i++)
                {
                    var job = Service.JobItems[i];

                    serviceHtml += SERVICE_NAME_HTML.Replace("{Service Name}", job.SeriveName);
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(ServiceName))
                {
                    var list = ServiceName.Split(",");

                    for (int i = 0; i < list.Length; i++)
                    {
                        serviceHtml += SERVICE_NAME_HTML.Replace("{Service Name}", list[i]);
                    }
                }

                if (!string.IsNullOrEmpty(AdditionalServiceName) && !AdditionalServiceName.Equals("none", StringComparison.OrdinalIgnoreCase))
                {
                    serviceHtml += SERVICE_NAME_HTML.Replace("{Service Name}", AdditionalServiceName);
                }
            }

            var ticketHtml = TICKET_NO_HTML.Replace("{Ticket No}", TicketID.ToString());

            html += serviceHtml;
            html += ticketHtml;

            Print(html);

            //ShowActivityIndicator();

            //string email = "";

            //var response = await SingleTon.WashApiService.SendEmail("karthiknever16@gmail.com", "something", html);

            //HideActivityIndicator();
        }

        async Task SendEmailReceipt(string email)
        {
            string emailContentHtml = MakeServiceReceipt();

            string subject = null;
            if (ServiceType == ServiceType.Wash)
                subject = Common.Messages.SERVICE_RECEIPT_SUBJECT;
            else // DETAIL
                subject = Common.Messages.DETAIL_RECEIPT_SUBJECT;

            ShowActivityIndicator();

            var response = await SingleTon.WashApiService.SendEmail(email, subject, emailContentHtml);

            HideActivityIndicator();

            HandleResponse(response);

            if (response.IsSuccess())
            {
                ShowAlertMsg(Common.Messages.EMAIL_SENT_MSG, titleTxt: Common.Messages.EMAIL);
            }

            //EmailServiceReceipt(emailContentHtml, subject);
        }

        //async Task TestEmailTemplate()
        //{
        //    ShowActivityIndicator();

        //    //string email = "";

        //    var response = await SingleTon.WashApiService.SendEmail("karthiknever16@gmail.com", "something", HTML_TEMPLATE);

        //    HideActivityIndicator();
        //}

        [Export("mailComposeController:didFinishWithResult:error:")]
        public void Finished(MFMailComposeViewController controller, MFMailComposeResult result, NSError error)
        {
            this.DismissViewController(true, null);
        }

        private void UpdateData()
        {
            lblTicketId.Text = TicketID.ToString();
            lblVehicle.Text = $"{Make} {Model} {Color}";

            if (Service is not null)
            {
                ServiceName = string.Empty;
                for (int i = 0; i < Service.JobItems.Count; i++)
                {
                    ServiceName += Service.JobItems[i].SeriveName;

                    if (i != Service.JobItems.Count - 1)
                    {
                        ServiceName += ",";
                    }
                }
            }

           // var mutableAttributedString = new NSMutableAttributedString(
           //"Services: ",
           //UIFont.SystemFontOfSize(18));
           // var attributedString = new NSAttributedString(
           //    ServiceName,
           //    font: UIFont.SystemFontOfSize(18, UIFontWeight.Semibold)
           //);

           // mutableAttributedString.Append(attributedString);
           // lblService.AttributedText = mutableAttributedString;

           // lblAmount.Text = $"${Amount}";
        }

        void Initialise()
        {
            Title = SCREEN_TITLE;
        }

        void NoReceiptClicked(UITapGestureRecognizer tap)
        {
            NavigateToServiceHome();
        }

        void NavigateToServiceHome()
        {
            UIViewController vc = null;
            //if (IsFromNewService)
            //    vc = NavigationController.ViewControllers[NavigationController.ViewControllers.Length - 6];
            //else
            //    vc = NavigationController.ViewControllers[NavigationController.ViewControllers.Length - 3];
            //NavigationController.PopToViewController(vc, true);
            NavigationController.PopToRootViewController(true);
        }

        string MakeServiceReceipt()
        {
            var body = "<p>Ticket Number : </p>" + TicketID + "<br /><br />";

            if (!string.IsNullOrEmpty(CustomerName))
            {
                body += "<p>Customer Details : </p>" + ""
                    + "<p>Customer Name - " + CustomerName + "</p><br />";
            }

            body += "<p>Vehicle Details : </p>" +
                 "<p>Make - " + Make + "</p>" +
                "<p>Model - " + Model + "</p>" +
                 "<p>Color - " + Color + "</p><br />" +
                 "<p>Services : " + "</p>";

            if (Service is not null)
            {
                //var totalAmt = 0f;
                for (int i = 0; i < Service.JobItems.Count; i++)
                {
                    var job = Service.JobItems[i];
                    var price = job.Price.ToString();
                    if ((job.Price % 1) == 0)
                    {
                        price += ":00";
                    }
                    else
                    {
                        var values = price.Split(".");
                        price = (int)job.Price + ":" + values[1];
                    }

                    body += "<p>" + job.SeriveName + " - " + "$" + price + "</p>";
                    //totalAmt += job.Price;
                    //Amount = totalAmt;
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(ServiceName))
                {
                    body += "<p>" + ServiceName + "</p>";
                }

                if (!string.IsNullOrEmpty(AdditionalServiceName) && !AdditionalServiceName.Equals("none", StringComparison.OrdinalIgnoreCase))
                {
                    body += "<p>" + AdditionalServiceName + "</p>";
                }
            }

            string stars = string.Empty;

            var shownCountOfCardNumber = 4;

            for (int i = 0; i < CardNumber.Length - shownCountOfCardNumber; i++)
            {
                stars += "*";
            }

            var maskedCardNumber = stars + CardNumber.Substring(CardNumber.Length - shownCountOfCardNumber, shownCountOfCardNumber);

            body += "<br /><p>Payment Details : </p>";
            body += "<p> Payment Type - Credit Card</p>";
            body += "<p> Card Number - " + maskedCardNumber + "</p>";

            body += "<br/ ><p>" + "Total Amount Paid: " + "$" + Amount.ToString() + "</p>";

            Debug.WriteLine("Email Body :" + body);

            return body;
        }

        void PrintReceipt()
        {
            string printContentHtml = MakeServiceReceipt();
            Print(printContentHtml);
        }

        //void PrintVehicleReceipt()
        //{
        //    string title = Common.Messages.SERVICE_RECEIPT_SUBJECT;

        //    if (ServiceType == ServiceType.Detail)
        //    {
        //        title = Common.Messages.DETAIL_RECEIPT_SUBJECT;
        //    }

        //    var html = HTML_TEMPLATE.Replace("{serviceTime}", "date").Replace("{title}", title).Replace("{Barcode}", "barcode")
        //        .Replace("{check_in}", "check_in").Replace("{check_out}", "check_out").Replace("{Vehicle Make}", Make).Replace("{Vehicle Model}", Model).Replace("{Vehicle Color}", Color)
        //        .Replace("{Client Name}", CustomerName).Replace("{Ticket No}", TicketID.ToString());
        //    Print(html);
        //}

        public void SendEmailClicked(string email)
        {
            _ = SendEmailReceipt(email);
        }
    }
}
