

// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Diagnostics;
using Foundation;
using Greeter.DTOs;
using MessageUI;
using UIKit;

namespace Greeter.Storyboards
{
    public partial class PaymentSucessViewController : BaseViewController, IMFMailComposeViewControllerDelegate
    {
        // Data
        const string SCREEN_TITLE = "Pay";

        public long TicketID;
        public string Make;
        public string Model;
        public string Color;
        public string ServiceName;
        public string AdditionalServiceName;
        public float Amount;
        public string CustomerName;
        //public bool IsFromNewService = true;
        public ServiceType ServiceType;
        public CreateServiceRequest Service;

        public PaymentSucessViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            NavigationController.NavigationBar.Hidden = true;

            Initialise();
            UpdateData();

            lblReceipt.AddGestureRecognizer(new UITapGestureRecognizer(NoReceiptClicked));

            btnPrint.TouchUpInside += delegate
            {
                PrintReceipt();
            };

            btnEmail.TouchUpInside += delegate
            {
                SendEmailReceipt();
            };
        }

        void SendEmailReceipt()
        {
            string emailContentHtml = MakeServiceReceipt();

            string subject = null;
            if (ServiceType == ServiceType.Wash)
                subject = Common.Messages.SERVICE_RECEIPT_SUBJECT;
            else // DETAIL
                subject = Common.Messages.DETAIL_RECEIPT_SUBJECT;

            EmailServiceReceipt(emailContentHtml, subject);
        }

        [Export("mailComposeController:didFinishWithResult:error:")]
        public void Finished(MFMailComposeViewController controller, MFMailComposeResult result, NSError error)
        {
            this.DismissViewController(true, null);
        }

        private void UpdateData()
        {
            lblTicketId.Text = TicketID.ToString();
            lblVehicle.Text = $"{Make} {Model} {Color}";

            if (Service is not null)
            {
                ServiceName = string.Empty;
                for (int i = 0; i < Service.JobItems.Count; i++)
                {
                    ServiceName += Service.JobItems[i].SeriveName;

                    if (i != Service.JobItems.Count - 1)
                    {
                        ServiceName += ",";
                    }
                }
            }

            var mutableAttributedString = new NSMutableAttributedString(
           "Services: ",
           UIFont.SystemFontOfSize(18));
            var attributedString = new NSAttributedString(
               ServiceName,
               font: UIFont.SystemFontOfSize(18, UIFontWeight.Semibold)
           );

            mutableAttributedString.Append(attributedString);
            lblService.AttributedText = mutableAttributedString;

            lblAmount.Text = $"${Amount}";
        }

        void Initialise()
        {
            Title = SCREEN_TITLE;
        }

        void NoReceiptClicked(UITapGestureRecognizer tap)
        {
            NavigateToServiceHome();
        }

        void NavigateToServiceHome()
        {
            UIViewController vc = null;
            //if (IsFromNewService)
            //    vc = NavigationController.ViewControllers[NavigationController.ViewControllers.Length - 6];
            //else
            //    vc = NavigationController.ViewControllers[NavigationController.ViewControllers.Length - 3];
            //NavigationController.PopToViewController(vc, true);
            NavigationController.PopToRootViewController(true);
        }

        string MakeServiceReceipt()
        {
            var body = "<p>Ticket Number : </p>" + TicketID + "<br /><br />";

            if (!string.IsNullOrEmpty(CustomerName))
            {
                body += "<p>Customer Details : </p>" + ""
                    + "<p>Customer Name - " + CustomerName + "</p><br />";
            }

            body += "<p>Vehicle Details : </p>" +
                 "<p>Make - " + Make + "</p>" +
                "<p>Model - " + Model + "</p>" +
                 "<p>Color - " + Color + "</p><br />" +
                 "<p>Services : " + "</p>";

            if (Service is not null)
            {
                var totalAmt = 0f;
                for (int i = 0; i < Service.JobItems.Count; i++)
                {
                    var job = Service.JobItems[i];
                    var price = job.Price.ToString();
                    if ((job.Price % 1) == 0)
                    {
                        price += ":00";
                    }
                    else
                    {
                        var values = price.Split(".");
                        price = (int)job.Price + ":" + values[1];
                    }

                    body += "<p>" + job.SeriveName + " - " + "$" + price + "</p>";
                    totalAmt += job.Price;
                    Amount = totalAmt;
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(ServiceName))
                {
                    body += "<p>" + ServiceName + "</p>";
                }

                if (!string.IsNullOrEmpty(AdditionalServiceName) && !AdditionalServiceName.Equals("none", StringComparison.OrdinalIgnoreCase))
                {
                    body += "<p>" + AdditionalServiceName + "</p>";
                }
            }

            body += "<br/ ><p>" + "Total Amount Paid: " + "$" + Amount.ToString() + "</p>";
            //body += "<br/ ><p>Note: Please avoid if you already paid.</p>";

            Debug.WriteLine("Email Body :" + body);

            return body;
        }

        void PrintReceipt()
        {
            string printContentHtml = MakeServiceReceipt();
            Print(printContentHtml);
        }
    }
}
