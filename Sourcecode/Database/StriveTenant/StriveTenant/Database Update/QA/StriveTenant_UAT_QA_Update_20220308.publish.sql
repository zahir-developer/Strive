/*
Deployment script for StriveTenant_UAT_QA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;



GO
USE [StriveTenant_UAT_QA];


GO
PRINT N'Altering [StriveCarSalon].[membershiplist]...';


GO
ALTER TABLE [StriveCarSalon].[membershiplist] DROP COLUMN [upchargeid];


GO
PRINT N'Altering [StriveCarSalon].[tblCheckListNotification]...';


GO
ALTER TABLE [StriveCarSalon].[tblCheckListNotification] ALTER COLUMN [NotificationDate] DATETIMEOFFSET (7) NULL;


GO
PRINT N'Creating [dbo].[Membershiplist]...';


GO
CREATE TABLE [dbo].[Membershiplist] (
    [Name]                                        NVARCHAR (255) NULL,
    [Car count]                                   FLOAT (53)     NULL,
    [Date]                                        NVARCHAR (255) NULL,
    [All Rows#Method]                             NVARCHAR (255) NULL,
    [Customer Name]                               NVARCHAR (255) NULL,
    [All Rows#Brand]                              NVARCHAR (255) NULL,
    [Last 4]                                      FLOAT (53)     NULL,
    [Substring value]                             NVARCHAR (255) NULL,
    [Amount]                                      MONEY          NULL,
    [All Rows#Status]                             NVARCHAR (255) NULL,
    [Bar Code (Custom Field #0)]                  NVARCHAR (255) NULL,
    [Barcode]                                     NVARCHAR (255) NULL,
    [Make]                                        NVARCHAR (255) NULL,
    [New Model]                                   NVARCHAR (255) NULL,
    [Model (Custom Field #2)]                     NVARCHAR (255) NULL,
    [Color (Custom Field #3)]                     NVARCHAR (255) NULL,
    [Monthly Package (Custom Field #4)]           NVARCHAR (255) NULL,
    [ABB pricing]                                 FLOAT (53)     NULL,
    [Extra Serv]                                  NVARCHAR (255) NULL,
    [All Rows#Vehicle Upcharge (Custom Field #5)] NVARCHAR (255) NULL,
    [Membership price]                            FLOAT (53)     NULL,
    [Membership]                                  NVARCHAR (255) NULL,
    [Car Number]                                  FLOAT (53)     NULL,
    [isDiscount]                                  NVARCHAR (255) NULL,
    [Additional services]                         NVARCHAR (255) NULL,
    [New upcharge]                                NVARCHAR (255) NULL,
    [Upcharges]                                   NVARCHAR (255) NULL,
    [Calculated Upcharge]                         FLOAT (53)     NULL,
    [Addl service price]                          FLOAT (53)     NULL,
    [Upcharge Price]                              FLOAT (53)     NULL,
    [New Total Price]                             FLOAT (53)     NULL,
    [Old New Same]                                NVARCHAR (255) NULL,
    [Difference]                                  NVARCHAR (255) NULL
);


GO
PRINT N'Creating [StriveCarSalon].[Stg_CustAcc]...';


GO
CREATE TABLE [StriveCarSalon].[Stg_CustAcc] (
    [CustAccID]     INT           NOT NULL,
    [LocationID]    INT           NOT NULL,
    [ClientID]      INT           NOT NULL,
    [VehID]         INT           NULL,
    [CurrentAmt]    MONEY         NULL,
    [ActiveDte]     SMALLDATETIME NULL,
    [LastUpdate]    SMALLDATETIME NULL,
    [LastUpdateBy]  INT           NULL,
    [Type]          INT           NULL,
    [Status]        INT           NULL,
    [MonthlyCharge] MONEY         NULL,
    [Limit]         MONEY         NULL,
    [CCno]          CHAR (20)     NULL,
    [cctype]        INT           NULL,
    [CCEXP]         CHAR (5)      NULL
);


GO
PRINT N'Creating [StriveCarSalon].[Stg_CustAccHist]...';


GO
CREATE TABLE [StriveCarSalon].[Stg_CustAccHist] (
    [CustAccID]    INT           NOT NULL,
    [CustAccTID]   INT           NOT NULL,
    [TXLocationID] INT           NOT NULL,
    [TXCustID]     INT           NOT NULL,
    [TXRecID]      INT           NULL,
    [TXType]       CHAR (20)     NULL,
    [TXAmt]        MONEY         NULL,
    [TXDte]        SMALLDATETIME NULL,
    [TXuser]       INT           NULL,
    [TXNote]       TEXT          NULL,
    [Archive]      BIT           NULL,
    [InvoiceID]    INT           NULL
);


GO
PRINT N'Creating [StriveCarSalon].[tblClientVehicleMembershipPaymentDetails]...';


GO
CREATE TABLE [StriveCarSalon].[tblClientVehicleMembershipPaymentDetails] (
    [PaymentId]          INT                IDENTITY (1, 1) NOT NULL,
    [ClientMembershipId] INT                NULL,
    [FailedAttempts]     INT                NULL,
    [LastPaymentDate]    DATETIME           NULL,
    [IsActive]           BIT                NULL,
    [IsDeleted]          BIT                NULL,
    [CreatedBy]          INT                NULL,
    [CreatedDate]        DATETIMEOFFSET (7) NULL,
    [UpdatedBy]          INT                NULL,
    [UpdatedDate]        DATETIMEOFFSET (7) NULL
);


GO
PRINT N'Altering [StriveCarSalon].[uspGetCheckListNotification]...';


GO

-- =============================================
-- Author:		Vetriselvi
-- Create date: 22-02-2022
-- Description:	To get Checklist available for the supplied date
--  --
/*
--[uspGetCheckListNotification] '2022-02-25 10:40:01'  
*/
-- =============================================
----------History------------
-- =============================================

-- =============================================
    

ALTER PROCEDURE [StriveCarSalon].[uspGetCheckListNotification]    
@date DATETIME    
AS    
BEGIN    
 
  SELECT cl.ChecklistId,  
   cl.Name,  
   NotificationTime,  
   CheckListEmployeeId,  
   cl.RoleId,  
   cln.NotificationDate,  
   e.Token  
 FROM [tblChecklist] cl  
 JOIN [tblCheckListNotification] cln ON cl.ChecklistId = cln.ChecklistId  
 JOIN [tblCheckListEmployeeNotification] en ON en.CheckListNotificationId = cln.CheckListNotificationId  
 join tblEmployee e ON e.EmployeeId = en.employeeId  
 WHERE cl.IsActive = 1 AND cl.IsDeleted = 0  
 AND en.IsActive = 1 AND en.IsDeleted = 0  
 AND CAST(ISNULL(cln.NotificationDate,GETDATE()) AS DATE) = CAST(@date AS DATE)  
 AND datepart(minute, cln.NotificationTime)  = datepart(minute, @date)  
 AND datepart(HOUR, cln.NotificationTime)  = datepart(HOUR, @date)  
 AND ISNULL(en.IsCompleted,0) = 0 AND ISNULL(e.Token,'') != ''  
  
END
GO
PRINT N'Altering [StriveCarSalon].[uspGetCheckNotificationList]...';


GO

-- =============================================
-- Author:		Vetriselvi
-- Create date: 22-02-2022
-- Description:	To get Checklist available for specific employee
--  --
/*
--EXEC [StriveCarSalon].[uspGetCheckNotificationList] 1138, 1, '2022-03-03 10:40:01'   
*/
-- =============================================
----------History------------
-- =============================================

-- =============================================
    
ALTER PROCEDURE [StriveCarSalon].[uspGetCheckNotificationList]    
@employeeId INT,    
@Role INT,    
@date DATETIME    
AS    
BEGIN    
    
  SELECT cl.ChecklistId,  
   cl.Name,  
   NotificationTime,  
   CheckListEmployeeId  
 FROM [tblChecklist] cl  
 JOIN [tblCheckListNotification] cln ON cl.ChecklistId = cln.ChecklistId  
 JOIN [tblCheckListEmployeeNotification] en ON en.CheckListNotificationId = cln.CheckListNotificationId  
 WHERE cl.RoleId= @Role   
 AND cl.IsActive = 1 AND cl.IsDeleted = 0  
 AND en.IsActive = 1 AND en.IsDeleted = 0  
 AND cln.IsActive = 1 AND cln.IsDeleted = 0  
 AND CAST(ISNULL(cln.NotificationDate,GETDATE()) AS DATE) = CAST(@date AS DATE)  
 AND ISNULL(en.IsCompleted,0) = 0 and en.employeeId = @employeeId  
END
GO
PRINT N'Altering [StriveCarSalon].[uspGetAllCheckOutDetails]...';


GO
-- ================================================  
-- Author:  Vineeth B  
-- Create date: 17-08-2020  
-- Description: Returns all jobs for checkout screen  
-- Example:  EXEC [StriveCarSalon].[uspGetAllCheckOutDetails] 1, '', 1, 100, 'ASC', NULL, '2022-01-27', '2022-01-27'  
-- ================================================  
  
-- ================================================  
-- ---------------History--------------------------  
-- ================================================  
--24-03-2021 - Zahir - Query optimized by reusing job and jobitem tables  
--23-04-2021 - Zahir - JOB Status join changed to Left from Inner.  
--05-05-2021 - Zahir - tblVehicleMake/Model table used instead of tblCodevalue table.  
--14-05-2021 - Zahir - Changed tblClient/tblClientVehicle INNER JOIN to Left Join. (Services added from sales won't have client information)   
--04-06-2021 - Zahir - Unk added for Model/Make/Color if empty.   
--06-06-2021 - Zahir - Overall SP Optimized, Few Search conditions removed.   
--20-07-2021 - Vetriselvi - Included all Service Type .   
--22-07-2021 - Vetriselvi - Remove the extra none from additional services  
--29-07-2021 - Vetriselvi - Included null values too while checking for deleted, table - ClientVehicleMembershipDetail   
--09-08-2021 - Vetriselvi - Removed the distinct keyword from checkout calculation  
--16-08-2021 - Zahir - Make/Model/Color taken from Job table instead of the clientVehicle table  
--14-09-2021 - Vetriselvi - Added Tips,Products and tax in cost  
--13-10-2021 - Zahir - JobType, JobStatus, IsHold added. 
--17-12-2021 - Lakshmana - TipAmount removed from pay amount field - #1415
--08-03-2022 - Juki - Fixed duplicate record
  
  
  
ALTER PROCEDURE [StriveCarSalon].[uspGetAllCheckOutDetails]  
@locationId int,  
@Query NVARCHAR(50) = NULL,  
@PageNo INT = NULL,  
@PageSize INT = 100,   
@SortOrder VARCHAR(5) = 'ASC',  
@SortBy VARCHAR(100) = NULL,  
@StartDate date = NULL,   
@EndDate date = NULL  
AS  
BEGIN  
  
SET NOCOUNT ON;  
  
DECLARE @Skip INT = 0;  
IF @PageSize is not NULL  
BEGIN  
SET @Skip = @PageSize * (@PageNo-1);  
END  
  
IF @PageSize is NULL  
BEGIN  
SET @PageSize = (Select count(1) from tblJob (NOLOCK) where isDeleted = 0 and CheckOut = 0);  
SET @PageNo = 1;  
SET @Skip = @PageSize * (@PageNo-1);  
Print @PageSize  
Print @PageNo  
Print @Skip  
END  
  
  
  
--DECLARE @CompletedJobStatus INT = (SELECT valueid FROM GetTable('JobStatus') WHERE valuedesc='Completed')  
--DECLARE @CompletedPaymentStatus INT = (SELECT valueid FROM GetTable('PaymentStatus') WHERE valuedesc='Success')  
--Collision,Uniform,Adjusment   
  
DROP TABLE IF EXISTS #GetAllServices  
  
DROP TABLE IF EXISTS #NeedOfPayment  
  
DROP TABLE IF EXISTS #JobType  
Select valueid, valuedesc into #JobType from GetTable('JobType')  
  
DROP TABLE IF EXISTS #ServiceType  
Select valueid, valuedesc into #ServiceType from GetTable('ServiceType')  
  
  
DROP TABLE IF EXISTS #JobStatus  
Select valueid, valuedesc into #JobStatus from GetTable('JobStatus')  
  
DROP TABLE IF EXISTS #VehicleColor  
Select valueid, valuedesc into #VehicleColor from GetTable('VehicleColor')  
  
DROP TABLE IF EXISTS #PaymentStatus  
Select valueid, valuedesc into #PaymentStatus from GetTable('PaymentStatus')  
  
  
DROP TABLE IF EXISTS #Jobs  
  
Select tblj.JobId,   
tblj.JobPaymentId,  
tblj.TicketNumber,   
tblji.JobItemId,   
tblji.ServiceId,   
tblji.Price,  
tblj.VehicleId,  
tblj.ClientId,  
tblj.Make,  
tblj.Model,  
tblj.Color,  
tblj.TimeIn,  
tblj.EstimatedTimeOut,  
tblj.JobType,  
tblj.JobStatus,  
tblj.CheckOut,  
tblj.IsHold  
into #Jobs from tbljob tblj  
INNER JOIN tblJobItem tblji (NOLOCK) on tblj.JobId = tblji.JobId  
INNER JOIN tblService tbls (NOLOCK) on tbls.ServiceId = tblji.ServiceId  
INNER JOIN #ServiceType st (NOLOCK) ON(tbls.ServiceType = st.valueid)  
where ( @locationId is null or tblj.LocationId = @locationId) AND tblj.IsActive=1 AND ISNULL(tblj.IsDeleted,0)=0  
AND ISNULL(tblji.IsDeleted,0)=0  
AND (tblj.JobDate between @StartDate and @EndDate or (@StartDate is NULL and @EndDate is Null))  
AND ISNULL(tblj.CheckOut,0)=0   
  
  
SELECT DISTINCT tblj.JobId--,tblji.ServiceId ServiceUsed,tblcvmds.ServiceId ServicePurchased   
,CASE WHEN tblcvmds.ServiceId IS NULL THEN 'Y'  
WHEN tblj.ServiceId = tblcvmds.ServiceId THEN 'N'  
END AS PaymentNeed  
INTO #NeedOfPayment  
FROM #Jobs tblj   
INNER JOIN tblClientVehicleMembershipDetails tblcvmd (NOLOCK)  
ON tblj.VehicleId = tblcvmd.ClientVehicleId AND tblcvmd.IsActive =1 AND ISNULL(tblcvmd.IsDeleted,0)=0   
INNER JOIN tblMembership tblm (NOLOCK) ON tblcvmd.MembershipId = tblm.MembershipId AND tblm.IsActive=1 AND ISNULL(tblm.IsDeleted,0)=0  
--INNER JOIN tblJobItem tblJi ON tblj.JobId = tblji.JobId AND tblji.IsActive=1 AND ISNULL(tblji.IsDeleted,0)=0  
LEFT JOIN tblClientVehicleMembershipService tblcvmds (NOLOCK) ON tblcvmds.ServiceId = tblj.ServiceId AND tblcvmds.IsActive=1 AND ISNULL(tblcvmds.IsDeleted,0)=0  
--where ( @locationId is null or tblj.LocationId = @locationId )  
-- and (tblj.JobDate between @StartDate and @EndDate or( @StartDate is NULL and @EndDate is Null))  
ORDER BY tblj.JobId  
  
DROP TABLE IF EXISTS #PaymentDo  
SELECT JobId,PaymentNeed,ROW_NUMBER() OVER (PARTITION BY JobId ORDER BY PaymentNeed desc)  
NeedToPay INTO #PaymentDo FROM #NeedOfPayment    
  
DROP TABLE IF EXISTS #PaymentNeedToDone  
SELECT JobId,PaymentNeed INTO #PaymentNeedToDone FROM #PaymentDo WHERE NeedToPay=1  
  
  
-- Product List    
DROP TABLE IF EXISTS #JobProductList    
    
SELECT     
 tbljb.JobId,    
   
 SUM(CAST((ISNULL(tbljbP.Price,0) * ISNULL(tbljbP.Quantity,0))*((ISNULL(tblp.TaxAmount,0)/100)) AS DECIMAL(18,2))) as TaxAmount,  
-- ((ISNULL(tbljbP.Quantity,0)) * ISNULL(tblp.TaxAmount,0) /100) AS TaxAmount,    
 SUM((ISNULL(tbljbP.Price,0) * ISNULL(tbljbP.Quantity,0))) AS Cost    
INTO    
 #JobProductList    
FROM     
 tblJob tbljb     
 JOIN     
 tblJobProductItem tbljbP     
ON  tbljb.JobId = tbljbP.JobId      
 JOIN    
 tblProduct tblp    
ON  tblp.ProductId=tbljbP.ProductId    
LEFT JOIN     
 tblCodeValue tblCV     
ON  tblP.ProductType = tblcv.id    
WHERE  (tbljb.JobDate between @StartDate and @EndDate or (@StartDate is NULL and @EndDate is Null)) AND (tbljb.LocationId = @LocationId OR @LocationId IS NULL)    
AND ISNULL(tbljbP.IsDeleted,0)=0     
AND ISNULL(tbljbP.IsActive,1)=1     
AND ISNULL(tbljb.IsDeleted,0)=0     
GROUP BY tbljb.JobId  
  
--DROP TABLE IF EXISTS #TipsAmount  
--SELECT j.JobId,SUM(ISNULL(pd.Amount,0)) TipsAmount  
--into #TipsAmount  
--From tblJob j   
--join tblJobPayment p on j.JobPaymentId = p.JobPaymentId  
--JOIN tblJobPaymentDetail pd on pd.JobPaymentId = p.JobPaymentId  
--join tblCodeValue cv on cv.id = pd.PaymentType  
--WHERE (j.JobDate between @StartDate and @EndDate ) AND cv.CodeValue = 'Tips'  
----AND p.PaymentStatus=@CompletedPaymentStatus  
----AND j.JobStatus=@CompletedJobStatus   
--and ISNULL(p.IsRollBack,0) != 1  
--GROUP BY j.JobId  
  
drop table if exists #checkout  
SELECT   
tblj.JobId,  
js.valuedesc,  
tblj.JobPaymentId,  
tblj.TicketNumber,  
tblj.IsHold,  
tblc.FirstName AS CustomerFirstName,  
tblc.LastName AS CustomerLastName,  
ISNULL(vm.MakeValue, 'Unk') AS VehicleMake,  
ISNULL(vmo.ModelValue, 'Unk') AS VehicleModel,  
ISNULL(vc.valuedesc, 'Unk') AS VehicleColor,  
CONCAT(ISNULL(vm.MakeValue, 'Unk'),'/',ISNULL(vmo.ModelValue, 'Unk'),'/',ISNULL(vc.valuedesc, 'Unk')) AS VehicleDescription,  
tbls.ServiceName,  
st.valuedesc AS ServiceTypeName,  
CASE WHEN st.valuedesc='Additional Services' THEN TRIM(tbls.ServiceName) END AS AdditionalServices,  
CASE WHEN st.valuedesc !='Additional Services' THEN TRIM(tbls.ServiceName) END AS [Services],  
(ISNULL(tblj.Price,0)-- + ISNULL(pl.Cost,0) + ISNULL(pl.TaxAmount,0)  
) Price,  
CONVERT(VARCHAR(5),tblj.TimeIn,108) AS Checkin,  
CONVERT(VARCHAR(5),tblj.EstimatedTimeOut,108) AS Checkout,  
ISNULL(tblm.MembershipName,'') AS MembershipName,  
ISNULL(ps.valuedesc,'') AS PaymentStatus,  
CASE  
 WHEN tblj.IsHold = 1 THEN '#00BFFF' -- TO SHOW PAID  
 WHEN tblm.MembershipName IS NOT NULL AND js.valuedesc='Completed' AND pntd.PaymentNeed ='Y' THEN '#FF1493'-- TO SHOW MEMBERSHIP NAME  
 WHEN (ps.valuedesc !='Success' OR tbljp.PaymentStatus IS NULL) AND js.valuedesc='Completed' THEN '#008000'   
 WHEN tblj.TimeIn !='' AND js.valuedesc!='Hold' AND st.valuedesc='Additional Services' and (ps.valuedesc != 'Success'OR tbljp.PaymentStatus IS NULL) THEN '#FFA500'  
 WHEN tblm.MembershipName IS NOT NULL AND js.valuedesc ='In Progress' AND st.valuedesc='Additional Services'  THEN '#FFA500'-- TO SHOW MEMBERSHIP NAME  
 WHEN tblm.MembershipName IS NOT NULL AND js.valuedesc='Completed' AND pntd.PaymentNeed ='N' THEN '#008000'-- TO SHOW MEMBERSHIP NAME  
 WHEN tblm.MembershipName IS NOT NULL AND js.valuedesc NOT IN('Completed','Hold')  THEN '#FF1493'-- TO SHOW MEMBERSHIP NAME  
 --WHEN tblm.MembershipName IS NOT NULL AND js.valuedesc ='In Progress' AND st.valuedesc='Additional Services'  THEN '#FFFF00'-- TO SHOW MEMBERSHIP NAME  
 WHEN ps.valuedesc ='Success' AND st.valuedesc IN('Additional Services') AND tblm.MembershipName IS NULL AND js.valuedesc NOT IN('Completed','Hold') THEN '#FFA500'  
 WHEN ps.valuedesc ='Success' AND js.valuedesc='Completed' THEN '#008000' -- TO SHOW PAID  
 WHEN ps.valuedesc ='Success' AND js.valuedesc NOT IN('Completed','Hold') THEN '#FF1493' -- TO SHOW PAID  
 WHEN (ps.valuedesc !='Success' OR tbljp.PaymentStatus IS NULL) AND js.valuedesc NOT IN('Completed','Hold') THEN '#FF1493'   
 WHEN (ps.valuedesc !='Success' OR tbljp.PaymentStatus IS NULL) AND js.valuedesc='Hold' THEN '#00BFFF'   
 WHEN tblj.TimeIn !='' AND (ps.valuedesc !='Success' OR tbljp.PaymentStatus IS NULL) AND js.valuedesc !='Hold' THEN '#FF1493'  
 WHEN tblm.MembershipName IS NULL THEN ''  
END AS ColorCode,  
CASE  
    WHEN ps.valuedesc = 'Success' AND tbljp.IsProcessed=1 AND ISNULL(tbljp.IsRollBack,0)=0 THEN 'Paid'  
 WHEN ps.valuedesc = 'Success' AND tbljp.IsProcessed=0 AND tbljp.IsRollBack=1 THEN ''  
 WHEN (ps.valuedesc != 'Success' OR ps.valuedesc IS NULL) THEN js.valuedesc  
END AS MembershipNameOrPaymentStatus,  
CASE    
    WHEN js.valuedesc='Completed' THEN 1  
 WHEN js.valuedesc='In Progress' THEN 2  
 WHEN js.valuedesc='Waiting' THEN 3  
 --WHEN js.valuedesc='Hold' THEN 4  
END AS JobStatusOrder,  
js.valuedesc as JobStatus,  
jt.valuedesc as JobType  
INTO   
 #Checkout  
FROM   
 #Jobs tblj WITH(NOLOCK)  
INNER JOIN  
 tblService tbls  WITH(NOLOCK) ON(tblj.ServiceId = tbls.ServiceId)  
INNER JOIN #ServiceType st ON(tbls.ServiceType = st.valueid)  
INNER JOIN #JobType jt ON(tblj.JobType = jt.valueid)  
LEFT JOIN #JobStatus js ON(tblj.JobStatus = js.valueid)  
LEFT JOIN  
 tblClient tblc  WITH(NOLOCK) ON(tblj.ClientId = tblc.ClientId)  
LEFT JOIN  
 tblClientVehicle tblcv  WITH(NOLOCK) ON(tblj.VehicleId = tblcv.VehicleId)  
LEFT JOIN   
 tblVehicleMake vm (NOLOCK) ON(tblj.Make = vm.MakeId)  
LEFT JOIN  
 tblVehicleModel vmo (NOLOCK) ON(tblj.Model = vmo.ModelId) and vm.MakeId = vmo.MakeId  
LEFT JOIN #VehicleColor vc ON(tblj.Color = vc.valueid)  
LEFT JOIN  
    tblClientVehicleMembershipDetails tblcvmd  WITH(NOLOCK)  
    ON tblcv.VehicleId = tblcvmd.ClientVehicleId AND  ISNULL(tblcvmd.IsActive,1) = 1 AND ISNULL(tblcvmd.IsDeleted,0) = 0  
    --AND tblcvmd.StartDate<=CAST(getdate() AS Date)  
    --AND tblcvmd.EndDate>=CAST(getdate() AS Date)  
LEFT JOIN  
 tblMembership tblm  WITH(NOLOCK) ON(tblm.MembershipId = tblcvmd.MembershipId) AND ISNULL(tblm.IsActive, 1) = 1 AND ISNULL(tblm.IsDeleted,0)=0  
LEFT JOIN  
 tblJobPayment tbljp  WITH(NOLOCK) ON tblj.JobPaymentId = tbljp.JobPaymentId AND tbljp.IsProcessed=1 AND ISNULL(tbljp.IsRollBack,0)=0 AND tbljp.IsActive = 1 AND ISNULL(tbljp.IsDeleted,0)=0   
LEFT JOIN #PaymentStatus ps ON(tbljp.PaymentStatus = ps.valueid)  
LEFT JOIN   
    #PaymentNeedToDone pntd ON(tblj.JobId = pntd.JobId)  
LEFT JOIN   
    #JobProductList pl ON(tblj.JobId = pl.JobId)   
WHERE   
--( @locationId is null or tblj.LocationId =@locationId )   
--and (tblj.JobDate  between @StartDate and @EndDate or( @StartDate is NULL and @EndDate is Null)) and  
--AND tblj.IsActive = 1   
--AND tblc.IsActive = 1 AND tblcv.IsActive = 1   
--AND tblji.IsActive = 1   
--AND tbls.IsActive = 1    
--AND ISNULL(tblj.IsDeleted,0) = 0 AND   
--AND ISNULL(tblc.IsDeleted,0) = 0 AND ISNULL(tblcv.IsDeleted,0) = 0   
--AND ISNULL(tbls.IsDeleted,0) = 0   
 ISNULL(tblcvmd.IsDeleted,0) = 0 and  
(@Query is null) OR (tblj.JobId like @Query  
--OR tblj.TimeIn like +@Query+'%'  
--OR tblj.EstimatedTimeOut like +@Query+'%'  
OR tblm.MembershipName like +@Query+'%'  
--OR ps.valuedesc like +@Query+'%'  
OR tblc.FirstName like +@Query+'%'  
OR tblc.LastName like +@Query+'%'  
--OR vm.MakeValue like +@Query+'%'  
--OR vmo.ModelValue like +@Query+'%'  
--OR vc.valuedesc like +@Query+'%'   
OR tbls.ServiceName  like +@Query+'%'  
--OR CONCAT(vm.MakeValue,' ',vmo.valuedesc,'/',vc.valuedesc) like '%'+@Query+'%'   
OR CONCAT_WS(' ',tblc.FirstName,tblc.LastName) like '%'+@Query+'%')  
  
  
ORDER BY js.valuedesc   
  
ALTER Table #Checkout ALTER COLUMN ColorCode Varchar(20)  
UPDATE #Checkout SET ColorCode= CASE WHEN ServiceTypeName='Additional Services' THEN '1-'+ColorCode ELSE '2-'+ColorCode END  
  
SELECT   
tmp.JobId,  
valuedesc,  
JobPaymentId,  
tmp.TicketNumber,  
CustomerFirstName,  
CustomerLastName,  
VehicleMake,  
VehicleModel,  
VehicleColor,  
IsHold,  
VehicleDescription,  
   
ISNULL(STUFF(  
   (SELECT  ', ' + AdditionalServices  
    FROM #Checkout C  
 WHERE C.JobId= tmp.JobID   
 and  ISNULL(AdditionalServices,'') != ''  
    FOR XML PATH('')  
 ), 1, 2, ''), 'None')   AS AdditionalServices,  
STUFF(  
   (SELECT DISTINCT', ' + [Services]  
    FROM #Checkout C1  
 WHERE C1.JobId= tmp.JobID  
    FOR XML PATH('')  
 ), 1, 2, '')  AS [Services]  
 , (SUM(Price)+ISNULL(pl.Cost,0) + ISNULL(pl.TaxAmount,0)) AS Cost
-- + ISNULL(ta.TipsAmount,0))   
 , Checkin  
 , Checkout  
 , MembershipName  
 , PaymentStatus  
 ,STUFF(MIN(ColorCode),1,2,'') AS ColorCode  
 , MembershipNameOrPaymentStatus  
 ,JobStatusOrder  
 ,JobStatus  
 ,JobType  
 into #GetAllServices  
 FROM   
 #Checkout tmp   
 LEFT JOIN #JobProductList pl ON(tmp.JobId = pl.JobId)   
 --LEFT JOIN #TipsAmount ta ON tmp.JobId = ta.JobId  
GROUP BY    
Tmp.JobId,  
Tmp.valuedesc,  
Tmp.JobPaymentId,  
tmp.TicketNumber,  
Tmp.CustomerFirstName,  
Tmp.CustomerLastName,  
VehicleDescription,  
Tmp.Checkin,  
tmp.IsHold,  
VehicleMake,  
VehicleModel,  
VehicleColor,  
Tmp.Checkout,  
Tmp.MembershipName,  
Tmp.PaymentStatus,  
Tmp.MembershipNameOrPaymentStatus,  
JobStatusOrder,  
JobStatus,  
JobType,  
pl.Cost, pl.TaxAmount
--ta.TipsAmount  
   
order by   
CASE WHEN @SortBy = 'TicketNumber' AND @SortOrder='ASC' THEN tmp.TicketNumber END ASC,  
CASE WHEN @SortBy = 'CustomerFirstName' AND @SortOrder='ASC' THEN tmp.CustomerFirstName END ASC,  
  
CASE WHEN @SortBy = 'CustomerLastName' AND @SortOrder='ASC' THEN tmp.CustomerLastName END ASC,  
CASE WHEN @SortBy = 'CheckIn' AND @SortOrder='ASC' THEN Checkin END ASC,  
CASE WHEN @SortBy = 'CheckOut' AND @SortOrder='ASC' THEN Checkout END ASC,  
  
CASE WHEN @SortBy = 'MembershipName' AND @SortOrder='ASC' THEN MembershipName END ASC,  
  
CASE WHEN @SortBy = 'MembershipNameOrPaymentStatus' AND @SortOrder='ASC' THEN MembershipNameOrPaymentStatus END ASC,  
  
CASE WHEN @SortBy IS NULL AND @SortOrder='ASC' THEN 1 END ASC,  
----DESC  
CASE WHEN @SortBy = 'TicketNumber' AND @SortOrder='DESC' THEN tmp.TicketNumber END DESC,  
CASE WHEN @SortBy = 'CheckIn' AND @SortOrder='DESC' THEN Checkin END DESC,  
CASE WHEN @SortBy = 'CheckOut' AND @SortOrder='DESC' THEN Checkout END DESC,  
CASE WHEN @SortBy = 'MembershipName' AND @SortOrder='DESC' THEN MembershipName END DESC,  
CASE WHEN @SortBy = 'CustomerFirstName' AND @SortOrder='DESC' THEN CustomerFirstName END DESC,  
CASE WHEN @SortBy = 'CustomerLastName' AND @SortOrder='DESC' THEN CustomerLastName END DESC,  
  
CASE WHEN @SortBy = 'MembershipNameOrPaymentStatus' AND @SortOrder='DESC' THEN MembershipNameOrPaymentStatus END DESC,  
  
CASE WHEN @SortBy IS NULL AND @SortOrder='DESC' THEN tmp.jobid END DESC,  
  
CASE WHEN @SortBy IS NULL AND @SortOrder IS NULL THEN tmp.jobId END ASC  
  
OFFSET (@Skip) ROWS FETCH NEXT (@PageSize) ROWS ONLY  
  
select * from #GetAllServices  
  
IF ( @Query IS NULL OR @Query = ' ' ) AND (@StartDate IS NOT NULL AND @EndDate IS NOT NULL)  
BEGIN   
  
Select count(1) as Count from tbljob j (NOLOCK) where j.jobDate Between @StartDate and @EndDate and ( @locationId is null or j.LocationId = @locationId) AND j.IsActive=1 AND ISNULL(j.IsDeleted,0)=0   
  
END  
ELSE  
IF (@Query IS Not NULL AND @Query != ' ') OR (@StartDate IS NOT NULL AND @EndDate IS NOT NULL)  
BEGIN  
SELECT   
DISTINCT count(tblj.JobId)  
FROM   
 #Jobs tblj WITH(NOLOCK)  
INNER JOIN  
 tblService tbls WITH(NOLOCK) ON(tblj.ServiceId = tbls.ServiceId)  
INNER JOIN #ServiceType st ON(tbls.ServiceType = st.valueid)  
LEFT JOIN tblClient tblc WITH(NOLOCK) ON(tblj.ClientId = tblc.ClientId)  
LEFT JOIN  
 tblClientVehicle tblcv WITH(NOLOCK) ON(tblj.VehicleId = tblcv.VehicleId)  
LEFT JOIN  
    tblClientVehicleMembershipDetails tblcvmd WITH(NOLOCK)  
    ON tblcv.VehicleId = tblcvmd.ClientVehicleId AND  ISNULL(tblcvmd.IsActive,1) = 1 AND ISNULL(tblcvmd.IsDeleted,0) = 0  
LEFT JOIN  
 tblMembership tblm WITH(NOLOCK) ON(tblm.MembershipId = tblcvmd.MembershipId) AND ISNULL(tblm.IsActive, 1) = 1 AND ISNULL(tblm.IsDeleted,0)=0  
WHERE   
--( @locationId is null or tblj.LocationId =@locationId )   
--and (tblj.JobDate  between @StartDate and @EndDate or( @StartDate is NULL and @EndDate is Null)) and  
 --AND tblj.IsActive = 1   
--AND tblc.IsActive = 1 AND tblcv.IsActive = 1   
--AND tblji.IsActive = 1   
--AND tbls.IsActive = 1    
--AND ISNULL(tblj.IsDeleted,0) = 0 AND   
--AND ISNULL(tblc.IsDeleted,0) = 0 AND ISNULL(tblcv.IsDeleted,0) = 0   
--AND ISNULL(tbls.IsDeleted,0) = 0   
tblcvmd.IsDeleted = 0 and  
((@Query is null) OR (tblj.JobId like @Query  
--OR tblj.TimeIn like +@Query+'%'  
--OR tblj.EstimatedTimeOut like +@Query+'%'  
OR tblm.MembershipName like +@Query+'%'  
--OR ps.valuedesc like +@Query+'%'  
OR tblc.FirstName like +@Query+'%'  
OR tblc.LastName like +@Query+'%'  
--OR vm.MakeValue like +@Query+'%'  
--OR vmo.ModelValue like +@Query+'%'  
--OR vc.valuedesc like +@Query+'%'   
OR tbls.ServiceName  like +@Query+'%'  
--OR CONCAT(vm.MakeValue,' ',vmo.valuedesc,'/',vc.valuedesc) like '%'+@Query+'%'   
  
OR CONCAT_WS(' ',tblc.FirstName, tblc.LastName) like +@Query+'%'))  
  
END  
  
END
GO
PRINT N'Altering [StriveCarSalon].[uspGetAllDetails]...';


GO
-- =============================================
-- Author:		Vineeth B
-- Create date: 05-09-2020
-- Description:	To show data in DetailsGrid
-- =============================================
---------------------History--------------------
-- =============================================
-- 07-09-2020, Vineeth - Add a new select for bay
--						 Add bayid col in 2dselect
-- 08-09-2020, Vineeth - Add service type name col
-- 09-09-2020, Vineeth - Add isactive condition
-- 09-10-2020, Vineeth - Add LocationId condition
-- 17-09-2020, Vineeth - Add valuedesc-Details
-- 21-09-2020, Vineeth - Add Outside service cond
--						 and order by condition
-- 29-09-2020, Vineeth - Add bracket in Details
--						 and Outside service
-- 24-11-2020, Vineeth - Add code for Upcharge
-- 09-12-2020, Vineeth - Add outside service condition
-- 23-04-2021, Zahir - Added JobType table to avoid invalid job records.
-- 05-05-2021, Zahir - Used VehicleMake and VehicleModel table instead of Codevalue.
-- 16-06-2021, Shalini - Removed first wildcard from Query
-- 08-10-2021, Zahir - Drive up customer changes.
-- 08-03-2022, Juki  - Fixed Upcharges issue

------------------------------------------------
 --[StriveCarSalon].[uspGetAllDetails] null,1,NULL,'zahir', null, null, 'ASC', 'TicketNo','2022-01-04','2022-01-04'
-- =============================================

ALTER PROCEDURE [StriveCarSalon].[uspGetAllDetails] 
(@JobDate Date = NULL, @LocationId int = NULL, @ClientId int = NULL, @Search varchar(50)=null,
@PageNo INT = NULL, 
@PageSize INT = NULL,
@SortOrder VARCHAR(5) = NULL, 
@SortBy VARCHAR(50) = NULL,
@StartDate date = NULL, 
@EndDate date = NULL)
AS
BEGIN

--DECLARE @JobDate Date = NULL, @LocationId int = NULL, @ClientId int = 55477, @Search varchar(50)=null


SELECT
BayId,
BayName
FROM tblBay
where 
IsActive=1  
and ISNULL(IsDeleted,0)=0
and (LocationId=@LocationId OR( @LocationId is null OR @LocationId=0)) and BayName like '%Detail%'
order by BayId


DROP TABLE IF EXISTS #ServiceType
Select valueid,valuedesc into #ServiceType from GetTable('ServiceType')

DROP TABLE IF EXISTS #Services
SELECT tblj.JobId, tblji.Price, tbls.ServiceName, tbls.ServiceId, st.valuedesc as ServiceType, tblj.ClientId 
INTO #Services FROM tblJob tblj 
INNER JOIN tblJobItem tblji ON(tblj.JobId = tblji.JobId)
INNER JOIN tblService tblS ON(tblji.ServiceId = tbls.ServiceId)
INNER JOIN GetTable('ServiceType') st ON(tbls.ServiceType = st.valueid)
WHERE (@JobDate is null OR tblj.JobDate=@JobDate) AND ((tblj.JobDate Between @StartDate and @EndDate) OR (@StartDate is null and @EndDate is null))
AND (@ClientId is null OR tblj.ClientId = @ClientId)
AND ((@LocationId is null OR @LocationId=0)OR tblj.LocationId=@LocationId)
AND tblj.IsActive = 1 AND tbljI.IsActive = 1 AND tblS.IsActive = 1
AND ISNULL(tblj.IsDeleted,0)=0 AND ISNULL(tbljI.IsDeleted,0)=0
--AND ISNULL(tblS.IsDeleted,0)=0 

--Select * from #Services

DROP TABLE IF EXISTS #Upcharge
SELECT JobId, ServiceName, Price 
INTO #Upcharge FROM #Services
WHERE ServiceType like '%Upcharge%'

--Select * from #Upcharge

DROP TABLE IF EXISTS #OutsideServices
SELECT JobId, ServiceName AS OutsideService INTO #OutsideServices 
FROM #Services
WHERE ServiceType = 'Outside Services'

--Select * from #OutsideServices

DROP TABLE IF EXISTS #Details
SELECT JobId, ServiceName AS ServiceTypeName INTO #Details 
FROM #Services
WHERE ServiceType = 'Detail Package'

--Select * from #Details

DROP TABLE IF EXISTS #AirFresheners
SELECT JobId, ServiceName AS OutsideService INTO #AirFresheners 
FROM #Services
WHERE ServiceType = 'Air Fresheners'

--Select * from #AirFresheners

DROP TABLE IF EXISTS #ServicePrice
SELECT JobId, SUM(Price) Price
INTO #ServicePrice FROM #Services
GROUP BY JobId

--Select * from #ServicePrice

DROP TABLE IF EXISTS #Detailslist

SELECT 
tblb.BayId,
tblb.BayName
,tblj.JobId 
,tblj.TicketNumber
,tblj.JobDate
,tblj.LocationId
,tbll.LocationName
--,tblji.JobItemId
,ISnULL(sp.Price, 0) AS Cost
,SUBSTRING(CONVERT(VARCHAR(8),tblj.TimeIn,108),0,6) AS TimeIn
,CONCAT(ISNULL(tblc.FirstName, 'Drive'),' ',ISNULL(tblc.LastName, 'Up')) AS ClientName
,tblca.PhoneNumber
,SUBSTRING(CONVERT(VARCHAR(8),tblj.EstimatedTimeOut,108),0,6) AS EstimatedTimeOut
,(det.ServiceTypeName) ServiceTypeName
,cvMfr.MakeValue AS VehicleMake
,cvMo.ModelValue AS VehicleModel
,cvCo.valuedesc AS VehicleColor
,ISNULL(upc.Price,0.00) AS Upcharge
,ISNULL(outs.OutsideService,'None') AS OutsideService
,tblcv.Barcode into #Detailslist
FROM tbljob tblj 
INNER JOIN GetTable('JobType') jt ON(tblj.JobType = jt.valueid)
LEFT join tblClient tblc ON (tblj.ClientId = tblc.ClientId OR @ClientId = NULL) OR (tblj.ClientId = @ClientId OR @ClientId IS NOT NULL)
INNER join tblJobDetail tbljd ON(tblj.JobId = tbljd.JobId)
left join tblClientAddress tblca ON(tblj.ClientId = tblca.ClientId)
LEFT join tblClientVehicle tblcv ON (tblc.ClientId = tblcv.ClientId and tblj.VehicleId = tblcv.VehicleId)
LEFT JOIN tblVehicleMake cvMfr ON(tblj.Make = cvMfr.MakeId)
LEFT JOIN tblVehicleModel cvMo ON(tblj.Model = cvMo.ModelId) and cvMfr.MakeId = cvMo.MakeId
LEFT join GetTable('VehicleColor') cvCo ON tblj.Color = cvCo.valueid
inner join #Services tblji ON(tblj.JobId = tblji.JobId)
inner join tblService tbls ON(tblji.ServiceId = tbls.ServiceId)
right join tblBay tblb ON(tbljd.BayId = tblb.BayId)
inner join tblLocation tbll on tblj.LocationId =tbll.LocationId
inner join GetTable('ServiceType') st ON(st.valueid = tbls.ServiceType)
left join #Upcharge upc ON(tblj.JobId = upc.JobId)
left join #Details det ON(tblj.JobId = det.JobId)
left join #OutsideServices outs ON(tblj.JobId = outs.JobId)
left join #AirFresheners ar ON(tblj.JobId =ar.JobId)
left join #ServicePrice sp ON(tblj.JobId = sp.JobId)
WHERE 
(@JobDate is null OR tblj.JobDate = convert(date, @JobDate, 105))
and 
(@LocationId is null OR  @LocationId=0 OR tblj.LocationId=@LocationId)
and
(@ClientId is null OR @ClientId=0 OR tblc.ClientId=@ClientId)
and
jt.valuedesc = 'Detail'
and
st.valuedesc in('Detail Package','Outside Services','Air Fresheners')
and
tblj.IsActive=1
and
tbljd.IsActive=1
--and
--tblji.IsActive=1
and
tblb.IsActive=1
--and
--tblcv.IsActive=1
and
ISNULL(tblb.IsDeleted,0)=0
and
ISNULL(tblj.IsDeleted,0)=0
and
ISNULL(tbljd.IsDeleted,0)=0
--and
--ISNULL(tblji.IsDeleted,0)=0
--and
--ISNULL(tblcv.IsDeleted,0)=0
and 
 (@Search is null or tblj.TicketNumber like @Search+'%'
 or det.ServiceTypeName like @Search+'%' or cvMfr.MakeValue like @Search+'%'
 or cvMo.ModelValue like @Search+'%'
 or cvCo.valuedesc like @Search+'%'
 or tblc.FirstName like @Search+'%'
 or tblc.LastName like @Search+'%'
 or outs.OutsideService like @Search+'%'
 or tblj.TimeIn like @Search+ '%'
 or tblj.EstimatedTimeOut like @Search+ '%')
 
 ORDER BY 
 CASE WHEN @SortBy = 'TicketNo' AND @SortOrder = 'ASC' THEN tblj.TicketNumber END ASC,
 CASE WHEN @SortBy = 'TimeIn' AND @SortOrder = 'ASC' THEN tblj.TimeIn END ASC,
 CASE WHEN @SortBy = 'TimeOut' AND @SortOrder = 'ASC' THEN tblj.EstimatedTimeOut END ASC,
 CASE WHEN @SortBy = 'ClientName' AND @SortOrder = 'ASC' THEN tblc.FirstName END ASC,
 --CASE WHEN @SortBy = 'PhoneNo' AND @SortOrder = 'ASC' THEN tblca.PhoneNumber END ASC,
 CASE WHEN @SortBy = 'Service' AND @SortOrder = 'ASC' THEN det.ServiceTypeName END ASC,
 CASE WHEN @SortBy = 'OutSideService' AND @SortOrder = 'ASC' THEN outs.OutsideService END ASC,
 --DESC
 CASE WHEN @SortBy = 'TicketNo' AND @SortOrder = 'DESC' THEN tblj.TicketNumber END DESC,
 CASE WHEN @SortBy = 'TimeIn' AND @SortOrder = 'DESC' THEN tblj.TimeIn END DESC,
 CASE WHEN @SortBy = 'TimeOut' AND @SortOrder = 'DESC' THEN tblj.EstimatedTimeOut END DESC,
 CASE WHEN @SortBy = 'ClientName' AND @SortOrder = 'DESC' THEN tblc.FirstName END DESC,
 --CASE WHEN @SortBy = 'PhoneNo' AND @SortOrder = 'DESC' THEN tblc.PhoneNumber END DESC,
 CASE WHEN @SortBy = 'Service' AND @SortOrder = 'DESC' THEN det.ServiceTypeName END DESC,
 CASE WHEN @SortBy = 'OutSideService' AND @SortOrder = 'DESC' THEN outs.OutsideService END DESC,
 
 CASE WHEN @SortBy IS NULL AND @SortOrder='DESC' THEN tblj.JobId END ASC,
 CASE WHEN @SortBy IS NULL AND @SortOrder IS NULL THEN tblj.JobId END ASC

 SELECT DISTINCT * FROM #Detailslist

END
GO
PRINT N'Altering [StriveCarSalon].[uspGetAllRecurringPaymentDetails]...';


GO

--use [StriveTenant_UAT_QA(Reverted)]
-- =============================================
-- Author:		Vetriselvi
-- Create date: 22-02-2022
-- Description:	To get Recurring Payment Details
--  --
/*

 --[uspGetAllRecurringPaymentDetails] 2,0,'2022-03-04'  

*/
-- =============================================
----------History------------
-- =============================================
--  06-Mar-2021 - Vetriselvi - Added LastPaymentDate condition
-- =============================================
  
ALTER PROCEDURE [StriveCarSalon].[uspGetAllRecurringPaymentDetails]  
@LocationId INT,  
@FailedAttempts INT,  
@date date  
AS  
BEGIN  
 SELECT   cvmd.ExpiryDate,  
    cvmd.ProfileId,  
    cvmd.AccountId,  
    cvmd.TotalPrice AS Amount,  
    ClientMembershipId,  
    cvmd.LastPaymentDate  
 FROM tblClientVehicleMembershipDetails cvmd  
 JOIN tblClientVehicle cv ON cv.VehicleId = cvmd.ClientVehicleId  
 JOIN tblClient c ON c.ClientId = cv.ClientId  
 WHERE ISNULL(cvmd.FailedAttempts,0) = @FailedAttempts  
   AND ProfileId is not null and AccountId is not null  
   AND cvmd.EndDate IS NULL  
   AND c.LocationId = @LocationId  
   AND (CAST(cvmd.LastPaymentDate AS DATE) < CAST(@date AS DATE) or cvmd.LastPaymentDate is null)  
   
END
GO
PRINT N'Altering [StriveCarSalon].[uspGetMerchantDetails]...';


GO

-- =============================================
-- Author:		Vetriselvi
-- Create date: 22-02-2022
-- Description:	To get Merchant Details
-- 

-- =============================================
----------History------------
-- =============================================


-- =============================================   
  
    
ALTER PROCEDURE [StriveCarSalon].[uspGetMerchantDetails]    
@LocationId INT = NULL,    
@IsRecurring BIT = NULL    
AS    
BEGIN    
    
SELECT     
MD.MerchantDetailId,    
MD.LocationId,    
MD.UserName,    
MD.MID,    
MD.[Password],    
MD.[URL]    
FROM  tblMerchantDetail MD    
JOIN tblLocation l ON l.LocationId = MD.LocationId    
WHERE (MD.LocationId = @LocationId OR @LocationId = 0) AND     
ISNULL(MD.IsActive,0) = 1 AND ISNULL(MD.isDeleted,0) = 0 AND     
ISNULL(l.IsActive,0) = 1 AND ISNULL(l.isDeleted,0) = 0    
AND (ISNULL(IsRecurring,0) = @IsRecurring )    
    
END
GO
PRINT N'Altering [StriveCarSalon].[uspGetTimeClockEmployeeHourDetail]...';


GO
-- =============================================
-- Author:		Zahir Hussain M
-- Create date: 18-Nov-2020
-- Description:	Returns the time clock details of the Employees based on location and date. Sample EXEC Strivecarsalon.uspGetTimeClockEmployeeHourDetail 2034, '2020-11-17'
--[StriveCarSalon].[uspGetTimeClockEmployeeHourDetail] 2,'2022-02-23','2022-02-23'
-- 2021-05-19 -shalini -round off wash hours to two decimal places
--  Vetriselvi 2021-09-29  - Fixed timeclock issue 
--  Vetriselvi 2021-09-29  - Reverted the changes done for LoginTime
--  Vetriselvi 2021-10-06  - Added new parameter to calculate the dynamic time
--  Vetriselvi 2021-10-12  - Addind time to hh mm format
--  Vetriselvi 2021-11-10  - Added total hours and hours should be in decimal format
--  Juki	   2022-02-23  - Added other hours with total hours.
--  Juki       2022-03-08  - Removed deleted employees record
-- =============================================
ALTER PROCEDURE [StriveCarSalon].[uspGetTimeClockEmployeeHourDetail]
	@locationId INT,
	@date datetime,
	@currentDate datetime = null
AS
BEGIN

DROP TABLE IF EXISTS #Hours_Data

select e.employeeId,
	E.FirstName,
	E.LastName,
	TC.EventDate,InTime,
CASE WHEN ISNULL(OutTime,'') = '' 
THEN 
	CASE WHEN (@currentDate <= InTime or @currentDate = null)
	THEN 0
	ELSE 
		CASE WHEN
			CAST(InTime AS DATE) = CAST(@currentDate AS DATE) 
			THEN DATEDIFF(MI, InTime, ISNULL(OutTime,@currentDate)) 
			ELSE 0
		END
	END 
ELSE DATEDIFF(MI, InTime, ISNULL(OutTime,InTime))
END as LoginTime,

	rm.RoleName INTO #Hours_Data
from tblTimeClock TC 
inner join tblEmployee E on TC.EmployeeId = E.EmployeeId
inner join tblRoleMaster rm on rm.RoleMasterId = tc.RoleId
where LocationId = @LocationId and EventDate = @Date and tc.InTime is Not NULL
AND ISNULL(TC.IsDeleted,0) = 0 AND tc.IsActive = 1 AND ISNULL(E.IsDeleted, 0) = 0


DROP TABLE IF EXISTS #FinalHours_Data
--select * from #Hours_Data
;WITH FinalResult AS (	
SELECT 
EmployeeId, FirstName, LastName,
CASE WHEN RoleName='Washer' THEN  LoginTime ELSE 0 END AS TotalWashHours,
CASE WHEN RoleName='Detailer' THEN  LoginTime ELSE 0 END AS TotalDetailHours,
CASE WHEN RoleName != 'Washer' AND RoleName != 'Detailer' THEN  LoginTime ELSE 0 END AS OtherHours
FROM #Hours_Data
)


select EmployeeId, FirstName, LastName,
SUM(TotalWashHours) TotalWashHours,
SUM(TotalDetailHours) AS TotalDetailHours,
SUM(OtherHours) AS OtherHours
 INTO #FinalHours_Data
 from FinalResult
 GROUP By EmployeeId, FirstName, LastName

Select DISTINCT EmployeeId, FirstName, LastName,CAST(TotalWashHours/60.00 AS DECIMAL(18,2))
--CAST(TotalWashHours/60 AS VARCHAR(10))+  CASE WHEN TotalWashHours%60 >=10 THEN CAST((TotalWashHours%60)/60.00 AS VARCHAR(10)) ELSE CAST(FORMAT(((TotalWashHours%60)/60.00), 'd2') AS VARCHAR(10)) END 
WashHours ,
--CAST(TotalDetailHours/60 AS VARCHAR(10))+ '.'+ CASE WHEN TotalDetailHours%60 >=10 THEN CAST(TotalDetailHours%60 AS VARCHAR(10)) ELSE CAST(FORMAT((TotalDetailHours%60), 'd2') AS VARCHAR(10)) END
CAST(TotalDetailHours/60.00 AS DECIMAL(18,2)) DetailHours,
--CAST(OtherHours/60 AS VARCHAR(10))+ '.'+ CASE WHEN OtherHours%60 >=10 THEN CAST(OtherHours%60 AS VARCHAR(10)) ELSE CAST(FORMAT((OtherHours%60), 'd2') AS VARCHAR(10)) END  
CAST(OtherHours/60.00 AS DECIMAL(18,2)) OtherHours,
--CAST((TotalWashHours+TotalDetailHours)/60 AS VARCHAR(10))+ '.'+ CASE WHEN (TotalWashHours+TotalDetailHours)%60 >=10 THEN CAST((TotalWashHours+TotalDetailHours)%60 AS VARCHAR(10)) ELSE CAST(FORMAT(((TotalWashHours+TotalDetailHours)%60), 'd2') AS VARCHAR(10)) END 
CAST((TotalWashHours+TotalDetailHours+OtherHours)/60.00 AS DECIMAL(18,2)) TotalHours 
 from #FinalHours_Data

SELECT TimeClockId, EmployeeId, RoleId, rm.RoleName, InTime, OutTime, CONVERT(VARCHAR(5), InTime, 108) as TimeIn, CONVERT(VARCHAR(5), OutTime, 108) as TimeOut,
tc.Status,tc.EventDate
,@LocationId as LocationId, l.LocationName
,Convert(datetimeoffset,'') as TotalHours,FORMAT(tc.EventDate, 'dddd') AS 'Day'
FROM tblTimeClock tc
INNER JOIN tblRoleMaster rm on rm.RoleMasterId = tc.RoleId
INNER JOIN tblLocation l on l.LocationId = tc.LocationId
WHERE tc.LocationId = @LocationId AND tc.EventDate = @Date AND (tc.IsDeleted = 0 OR tc.IsDeleted is null)
AND tc.IsActive = 1



END
GO
PRINT N'Altering [StriveCarSalon].[uspGetUserByAuthId]...';


GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	Auth user 
-- 
/*
 --[StriveCarSalon].[uspGetUserByAuthId] 2663,'fpuYqhRvKECjudQZXHUdmB:APA91bE8gW5qPhAw6eL4NXmpbJloia0zPDoq0ZUa33NQ_-19Mh0HkLYLLHFIDqz1fU38JzgmN5J1gekowKvzMj_d7-hOWM4qrWSugr0lewTAmozE6pZWRfak6rCx3laJTVQqZsNJgeuv'  

 */
-- =============================================
----------History------------
-- =============================================

--  22-Feb-2021 - Vetriselvi - Added new parameter @Token
-- =============================================   
  
ALTER PROCEDURE [StriveCarSalon].[uspGetUserByAuthId]   
(@AuthId int,  
@Token VARCHAR(500) = NULL)  
as  
begin  
SELECT  
Emp.EmployeeId,  
EmpDet.EmployeeCode,  
Emp.FirstName,  
Emp.LastName,  
EmpAdd.PhoneNumber,  
EmpAdd.Email,  
EmpDet.AuthId,  
Emp.IsActive,  
ISNULL(ClientDet.ClientId,0) ClientId,  
ISNULL(ClientDet.AuthId,0) ClientAuthId  
FROM  
tblEmployee Emp  
LEFT JOIN  
tblEmployeeDetail EmpDet ON Emp.EmployeeId = EmpDet.EmployeeId  
LEFT JOIN  
tblClient ClientDet ON ClientDet.AuthId = @AuthId  
LEFT JOIN   
tblEmployeeAddress EmpAdd on Emp.EmployeeId = EmpAdd.EmployeeId  
WHERE  
EmpDet.AuthId = @AuthId --AND (Emp.IsDeleted=0 OR Emp.IsDeleted IS NULL)  
  
  
SELECT EmpRo.EmployeeId,EmpRo.RoleId, rm.RoleName AS RoleName  
FROM  
tblEmployeeRole EmpRo  
INNER JOIN tblRoleMaster rm on EmpRo.RoleId=rm.RoleMasterId  
LEFT JOIN tblEmployeeDetail EmpDet  
ON EmpDet.EmployeeId = EmpRo.EmployeeId   
WHERE  
EmpDet.AuthId = @AuthId AND EmpRo.IsDeleted=0  
  
SELECT DISTINCT EmpLo.EmployeeId,EmpLo.LocationId, Lo.LocationName, la.City,tblc.valuedesc AS CityName  
FROM  
tblEmployeeLocation EmpLo  
INNER JOIN  
tblLocation Lo   
ON EmpLo.LocationId=Lo.LocationId AND ISNULL(Lo.IsDeleted,0) = 0  
INNER JOIN tblEmployeeDetail EmpDet ON EmpDet.EmployeeId = EmpLo.EmployeeId   
LEFT JOIN tbllocationaddress la on Lo.LocationId = la.LocationId  
LEFT JOIN [GetTable]('City') tblc ON (la.City = tblc.valueid)  
WHERE  
EmpDet.AuthId = @AuthId AND EmpLo.IsDeleted=0 ORDER BY Lo.LocationId  
  
SELECT EmpLoDr.drawerid,EmpLoDr.DrawerName, Lo.LocationId  
FROM  
tblDrawer EmpLoDr  
INNER JOIN  
tblLocation Lo   
ON EmpLoDr.LocationId=Lo.LocationId  
INNER JOIN   
tblEmployeeLocation EmpLo  
ON EmpLo.LocationId = EmpLoDr.LocationId  
INNER JOIN  
tblEmployeeDetail EmpDet  
ON EmpDet.EmployeeId = EmpLo.EmployeeId   
WHERE  
EmpDet.AuthId = @AuthId --AND EmpLoDr.IsActive=1 AND EmpLoDr.IsDeleted=0  
  
  
  
DECLARE @EmployeeID INT;  
SELECT @EmployeeID = EmployeeId FROM tblEmployeeDetail WHERE AuthId=@AuthId  
  
SELECT   
emp.EmployeeId,   
emp.FirstName,  
emp.LastName,  
rolper.RoleId,  
rolmas.RoleName,  
module.ModuleName,  
modscrn.ViewName  
FROM tblEmployee emp   
left join tblEmployeeRole emprol on emprol.EmployeeId=emp.EmployeeId  
left join tblRoleMaster rolmas on emprol.RoleId=rolmas.RoleMasterId  
left join TblRolePermissionDetail rolper on rolper.RoleId=emprol.RoleId  
left join TblModule module on rolper.ModuleId=module.ModuleId  
left join TblModuleScreen modscrn on rolper.ModuleScreenId=modscrn.ModuleScreenId  
WHERE emp.EmployeeId =@Employeeid   
--AND  emp.IsActive = 1  
--AND emprol.IsActive=1  
AND  ISNULL( rolmas.IsActive,1) =1  
--AND rolper.IsActive =1  
AND module.IsActive =1  
AND modscrn.IsActive =1  
--AND ISNULL(emp.IsDeleted,0)=0    
AND ISNULL(emprol.IsDeleted,0)=0  
AND ISNULL(rolmas.IsDeleted,0)=0  
AND ISNULL(rolper.IsDeleted,0)=0  
AND ISNULL(modscrn.IsDeleted,0)=0   
AND ISNULL(module.IsDeleted,0)=0  
  
IF( ISNULL(@Token,'') ! = '')  
BEGIN  
 UPDATE Emp  
 SET Emp.Token = @Token  
 FROM  
 tblEmployee Emp  
 LEFT JOIN  
 tblEmployeeDetail EmpDet ON Emp.EmployeeId = EmpDet.EmployeeId  
  
 WHERE  
 EmpDet.AuthId = @AuthId  
END  
  
Select 0  
  
end
GO
PRINT N'Altering [StriveCarSalon].[uspUpdateCheckListNotification]...';


GO

-- =============================================
-- Author:		Vetriselvi
-- Create date: 22-02-2022
-- Description:	update checklist status
-- 
-- =============================================
----------History------------
-- =============================================

-- =============================================   
  
  
ALTER PROCEDURE [StriveCarSalon].[uspUpdateCheckListNotification]  
@CheckListEmployeeId INT,  
@userId INT,  
@IsCompleted BIT,  
@date DATETIME,  
@CheckListNotificationId INT = NULL,  
@EmployeeId INT =NULL  
AS  
BEGIN  
 UPDATE [tblCheckListEmployeeNotification]  
 SET IsCompleted = @IsCompleted,  
 UpdatedBy = @userId,  
 UpdatedDate = @date  
 WHERE CheckListEmployeeId = @CheckListEmployeeId  
  
END
GO
PRINT N'Altering [StriveCarSalon].[uspUpdatePaymentDetails]...';


GO

-- =============================================
-- Author:		Vetriselvi
-- Create date: 22-02-2022
-- Description:	update Payment Details 
-- 
-- =============================================
----------History------------
-- =============================================

-- =============================================   
  
ALTER PROCEDURE [StriveCarSalon].[uspUpdatePaymentDetails]
@date DATETIME null,      
@attempts INT,      
@ClientMembershipId INT      
AS      
BEGIN      
 UPDATE tblClientVehicleMembershipDetails      
 SET LastPaymentDate = @date,      
 FailedAttempts = @attempts      
 WHERE ClientMembershipId = @ClientMembershipId    
  
 INSERT INTO tblClientVehicleMembershipPaymentDetails  
 SELECT @ClientMembershipId,@attempts,GETDATE(),1,0,NULL,GETDATE(),NULL,GETDATE()  
END
GO

GO
PRINT N'Update complete.';


GO
